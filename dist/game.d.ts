import { App } from './app';
import { AppState } from './appstate';
import { Effect } from './effects/effect';
import { Entity } from './entity';
import { GameOptions } from './gameoptions';
import { Rect } from './rect';
import { Sprite } from './sprite';
import { TileMap, TileMapCell } from './tilemap';
import { Vec2 } from './vec2';
export declare class Game extends AppState {
    readonly tileSize: Rect;
    readonly viewport: Rect;
    readonly effects: Effect[];
    readonly entities: Entity[];
    readonly cursor: Vec2;
    turnIndex: number;
    blocked: boolean;
    targetCallback?: Function;
    targetSprite?: Sprite;
    targetTile?: TileMapCell;
    targetEntity?: Entity;
    path?: TileMapCell[];
    pathIndex: number;
    onUpdate?: Function;
    tileMap?: TileMap;
    player?: Entity;
    followPlayer: boolean;
    constructor(app: App, options: GameOptions);
    update(): void;
    private updateEffects;
    private updateEntities;
    private updateViewport;
    private drawTileMap;
    private drawTargeting;
    private drawEntities;
    private drawEffects;
    isTargeting(): boolean;
    startTargeting(callback: Function): void;
    private endTargeting;
    cancelTargeting(): void;
    private handlePlayerInput;
    tryMoveOrAttack(dx: number, dy: number): boolean | undefined;
    private doAi;
    private nextTurn;
    isBlocked(x: number, y: number): boolean;
    getEnemyAt(x: number, y: number): Entity | undefined;
    recomputeFov(): void;
}
