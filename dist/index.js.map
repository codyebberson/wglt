{"version":3,"sources":["webpack://wglt/webpack/universalModuleDefinition","webpack://wglt/webpack/bootstrap","webpack://wglt/./src/vec2.ts","webpack://wglt/./src/rect.ts","webpack://wglt/./src/effects/effect.ts","webpack://wglt/./src/colors.ts","webpack://wglt/./src/gui/panel.ts","webpack://wglt/./src/input.ts","webpack://wglt/./src/keys.ts","webpack://wglt/./src/ai/ai.ts","webpack://wglt/./src/keyboard.ts","webpack://wglt/./src/glutils.ts","webpack://wglt/./src/appstate.ts","webpack://wglt/./src/gui.ts","webpack://wglt/./src/gui/dialogrenderer.ts","webpack://wglt/./src/color.ts","webpack://wglt/./src/effects/bumpeffect.ts","webpack://wglt/./src/effects/floatingtexteffect.ts","webpack://wglt/./src/effects/slideeffect.ts","webpack://wglt/./src/path.ts","webpack://wglt/./src/sprite.ts","webpack://wglt/./src/rng.ts","webpack://wglt/./src/gui/dialog.ts","webpack://wglt/./src/index.ts","webpack://wglt/./src/app.ts","webpack://wglt/./src/mouse.ts","webpack://wglt/./src/renderset.ts","webpack://wglt/./src/entity.ts","webpack://wglt/./src/xarray.ts","webpack://wglt/./src/game.ts","webpack://wglt/./src/ai/basicmonster.ts","webpack://wglt/./src/ai/confusedmonster.ts","webpack://wglt/./src/effects/projectileeffect.ts","webpack://wglt/./src/gui/imagepanel.ts","webpack://wglt/./src/gui/messagelog.ts","webpack://wglt/./src/gui/selectdialog.ts","webpack://wglt/./src/tilemap.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vec2","[object Object]","x","y","this","delta","vec2_1","Rect","width","height","super","x1","y1","x2","y2","left","top","other","Effect","countdown","blocking","game","color_1","Colors","BLACK","fromRgb","WHITE","GRAY","LIGHT_GRAY","DARK_GRAY","YELLOW","BROWN","RED","LIGHT_RED","DARK_RED","LIGHT_GREEN","DARK_GREEN","LIGHT_CYAN","DARK_CYAN","LIGHT_BLUE","DARK_BLUE","LIGHT_MAGENTA","DARK_MAGENTA","ORANGE","Panel","gui","rect","modal","Input","down","downCount","upCount","Keys","VK_CANCEL","VK_HELP","VK_BACK_SPACE","VK_TAB","VK_CLEAR","VK_ENTER","VK_SHIFT","VK_CONTROL","VK_ALT","VK_PAUSE","VK_CAPS_LOCK","VK_ESCAPE","VK_SPACE","VK_PAGE_UP","VK_PAGE_DOWN","VK_END","VK_HOME","VK_LEFT","VK_UP","VK_RIGHT","VK_DOWN","VK_PRINTSCREEN","VK_INSERT","VK_DELETE","VK_0","VK_1","VK_2","VK_3","VK_4","VK_5","VK_6","VK_7","VK_8","VK_9","VK_COLON","VK_SEMICOLON","VK_LESS_THAN","VK_EQUALS","VK_GREATER_THAN","VK_QUESTION_MARK","VK_AT","VK_A","VK_B","VK_C","VK_D","VK_E","VK_F","VK_G","VK_H","VK_I","VK_J","VK_K","VK_L","VK_M","VK_N","VK_O","VK_P","VK_Q","VK_R","VK_S","VK_T","VK_U","VK_V","VK_W","VK_X","VK_Y","VK_Z","VK_CONTEXT_MENU","VK_NUMPAD0","VK_NUMPAD1","VK_NUMPAD2","VK_NUMPAD3","VK_NUMPAD4","VK_NUMPAD5","VK_NUMPAD6","VK_NUMPAD7","VK_NUMPAD8","VK_NUMPAD9","VK_MULTIPLY","VK_ADD","VK_SEPARATOR","VK_SUBTRACT","VK_DECIMAL","VK_DIVIDE","VK_F1","VK_F2","VK_F3","VK_F4","VK_F5","VK_F6","VK_F7","VK_F8","VK_F9","VK_F10","VK_F11","VK_F12","VK_F13","VK_F14","VK_F15","VK_F16","VK_F17","VK_F18","VK_F19","VK_F20","VK_F21","VK_F22","VK_F23","VK_F24","VK_NUM_LOCK","VK_SCROLL_LOCK","VK_CIRCUMFLEX","VK_EXCLAMATION","VK_DOUBLE_QUOTE","VK_HASH","VK_DOLLAR","VK_PERCENT","VK_AMPERSAND","VK_UNDERSCORE","VK_OPEN_PAREN","VK_CLOSE_PAREN","VK_ASTERISK","VK_PLUS","VK_PIPE","VK_HYPHEN_MINUS","VK_OPEN_CURLY_BRACKET","VK_CLOSE_CURLY_BRACKET","VK_TILDE","VK_COMMA","VK_PERIOD","VK_SLASH","VK_BACK_QUOTE","VK_OPEN_BRACKET","VK_BACK_SLASH","VK_CLOSE_BRACKET","VK_QUOTE","VK_META","VK_ALTGR","VK_WIN","VK_KANA","VK_HANGUL","VK_EISU","VK_JUNJA","VK_FINAL","VK_HANJA","VK_KANJI","VK_CONVERT","VK_NONCONVERT","VK_ACCEPT","VK_MODECHANGE","VK_SELECT","VK_PRINT","VK_EXECUTE","VK_SLEEP","AI","entity","activatedCount","input_1","KEY_COUNT","Keyboard","el","keys","Array","addEventListener","e","setKey","state","stopPropagation","preventDefault","keyCode","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","ExtendedTexture","WebGLTexture","loaded","initShaderProgram","vsSource","fsSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","createTexture","url","texture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","generateMipmap","src","gui_1","AppState","app","GUI","handleInput","draw","dialogrenderer_1","rect_1","panels","renderer","DialogRenderer","panel","push","length","drawContents","baseRect","dialog","sx0","sy0","sw","sh","sx1","sy1","sx2","sy2","dx0","dy0","dw","dh","dx1","dy1","dx2","dy2","drawImage","undefined","g","b","a","fromHsv","h","v","f","q","effect_1","DURATION","BumpEffect","target","dx","dy","offsetX","offsetY","update","colors_1","FloatingTextEffect","str","pixelX","pixelY","color","frame","viewport","Math","min","floor","drawCenteredString","SlideEffect","count","tileSize","dxs","dys","costs","getMinCell","bestCell","bestIndex","minDist","Infinity","cell","splice","buildPath","result","curr","prev","reverse","computePath","map","dest","maxDist","grid","abs","clearDijkstra","sourceCell","u","alt","blocked","DEFAULT_TICKS_PER_FRAME","Sprite","frames","loop","ticksPerFrame","colorOverride","animIndex","animDelay","globalAnimIndex","RNG","seed","nextInt","start","end","rangeSize","chances","total","reduce","roll","nextRange","runningTotal","chancesMap","values","chooseIndex","panel_1","Dialog","title","index","indexOf","__export","keyboard_1","mouse_1","renderset_1","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_GLYPH_WIDTH","DEFAULT_GLYPH_HEIGHT","DEFAULT_FILL_WINDOW","DEFAULT_SCALE_FACTOR","App","options","canvas","Error","getContext","alpha","antialias","size","glyphSize","fillWindow","scaleFactor","aspectRatio","center","disable","DEPTH_TEST","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","style","outline","tabIndex","renderSet","RenderSet","imageUrl","keyboard","mouse","Mouse","handleResizeEvent","renderLoop","innerWidth","innerHeight","mobile","isMobile","minMajorAxis","minMinorAxis","max","round","navigator","userAgent","match","resetGl","flush","requestAnimationFrame","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","positionArrayIndex","texcoordArrayIndex","colorArrayIndex","w","drawString","getKey","prevX","prevY","mouseEventHandler","handleEvent","touchEventHandler","handleTouchEvent","touches","touch","updatePosition","clientX","clientY","focus","getBoundingClientRect","terminalAspectRatio","rectAspectRatio","actualWidth","excess","actualHeight","glutils_1","BUFFER_SIZE","spriteVertexShader","spriteFragmentShader","program","viewportSizeLocation","getUniformLocation","positionLocation","getAttribLocation","texcoordLocation","colorLocation","positionBuffer","createBuffer","texcoordBuffer","colorBuffer","spriteTexture","positionArray","Float32Array","texcoordArray","colorUint8Array","colorDataView","DataView","buffer","lines","split","glyphWidth","glyphHeight","j","drawChar","charCodeAt","optColor","optDw","optDh","tx","ty","tx2","ty2","setUint32","useProgram","uniform2f","activeTexture","TEXTURE0","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","FLOAT","normalize","stride","offset","vertexAttribPointer","primitiveType","TRIANGLES","drawArrays","bumpeffect_1","floatingtexteffect_1","slideeffect_1","xarray_1","Entity","sprite","blocks","health","maxHealth","actionPoints","inventory","XArray","canPickup","canAttack","destX","destY","tileMap","isBlocked","xSpeed","ySpeed","effects","targetX","targetY","distance","hypot","move","entities","onBump","onAttack","takeDamage","damage","toString","onDamage","onDeath","item","onPickup","onUse","appstate_1","keys_1","path_1","sprite_1","DEFAULT_TILE_WIDTH","DEFAULT_TILE_HEIGHT","Game","turnIndex","cursor","pathIndex","updateGlobalAnimations","updateEffects","updateEntities","onUpdate","updateViewport","drawTileMap","drawTargeting","drawEntities","drawEffects","effect","isDone","turnCount","currEntity","player","handlePlayerInput","doAi","nextTurn","horizontalMargin","verticalMargin","isTargeting","targetSprite","isVisible","blockingCount","targetCallback","callback","cancelTargeting","isKeyPressed","endTargeting","targetEntity","getEnemyAt","targetTile","path","attack","getCell","nextStep","right","up","wait","tryMoveOrAttack","ai","computeFov","sort","ai_1","BasicMonster","monster","distanceTo","moveToward","rng_1","ConfusedMonster","rng","numTurns","oldAi","ProjectileEffect","position","velocity","duration","add","ImagePanel","srcRect","destRect","dst","Message","text","MessageLog","maxItems","messages","msg","dialog_1","MARGIN","LINE_HEIGHT","SelectDialog","String","fromCharCode","close","startY","endY","tilemapVS","tilemapFS","TileMapCell","tile","visible","seen","TileMapLayer","imageData","dimensions","texSubImage2D","TileMap","layerCount","layers","tileWidth","tileHeight","originX","originY","minX","maxX","minY","maxY","quadVertBuffer","STATIC_DRAW","tilemapShader","positionAttribute","textureAttribute","viewportSizeUniform","viewOffsetUniform","mapSizeUniform","tileSizeUniform","tileSamplerUniform","spriteSamplerUniform","initGl","layerIndex","layer","ti","uniform1i","TEXTURE1","tx1","ty1","isSeen","setAlpha","uniform2fv","updateGl","radius","computeOctantY","computeOctantX","deltaX","deltaY","startSlopes","endSlopes","halfSlope","processedCell","extended","centreSlope","startSlope","endSlope","previousEndSlope","iteration","totalObstacles","obstaclesInLastLine","minSlope","idx"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"wglt\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"wglt\"] = factory();\n\telse\n\t\troot[\"wglt\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","\nexport class Vec2 {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(delta: Vec2) {\n    this.x += delta.x;\n    this.y += delta.y;\n  }\n}\n","import {Vec2} from './vec2';\n\nexport class Rect extends Vec2 {\n  width: number;\n  height: number;\n\n  constructor(x: number, y: number, width: number, height: number) {\n    super(x, y);\n    this.width = width;\n    this.height = height;\n  }\n\n  get x1(): number {\n    return this.x;\n  }\n\n  get y1(): number {\n    return this.y;\n  }\n\n  get x2(): number {\n    return this.x + this.width;\n  }\n\n  get y2(): number {\n    return this.y + this.height;\n  }\n\n  get left(): number {\n    return this.x;\n  }\n\n  get top(): number {\n    return this.y;\n  }\n\n  getCenter() {\n    return new Vec2(this.x + (this.width / 2) | 0, this.y + (this.height / 2) | 0);\n  }\n\n  intersects(other: Rect) {\n    return this.x <= other.x2 && this.x2 >= other.x && this.y <= other.y2 && this.y2 >= other.y;\n  }\n}\n","import {App} from '../app';\nimport {Game} from '../game';\n\nexport abstract class Effect {\n  countdown: number;\n  blocking: boolean;\n\n  constructor(countdown: number, blocking: boolean) {\n    this.countdown = countdown;\n    this.blocking = blocking;\n  }\n\n  isDone() {\n    return this.countdown <= 0;\n  }\n\n  update() {\n    this.countdown--;\n  }\n\n  draw(game: Game) {}\n}\n","\nimport {fromRgb} from './color';\n\nexport class Colors {\n  static readonly BLACK = fromRgb(0, 0, 0);\n  static readonly WHITE = fromRgb(0xff, 0xff, 0xff);\n  static readonly GRAY = fromRgb(0x80, 0x80, 0x80);\n  static readonly LIGHT_GRAY = fromRgb(0xaa, 0xaa, 0xaa);\n  static readonly DARK_GRAY = fromRgb(0x55, 0x55, 0x55);\n  static readonly YELLOW = fromRgb(0xff, 0xff, 0x55);\n  static readonly BROWN = fromRgb(0xaa, 0x55, 0x00);\n  static readonly RED = fromRgb(0xff, 0x00, 0x00);\n  static readonly LIGHT_RED = fromRgb(0xff, 0x55, 0x55);\n  static readonly DARK_RED = fromRgb(0xaa, 0x00, 0x00);\n  static readonly LIGHT_GREEN = fromRgb(0x55, 0xff, 0x55);\n  static readonly DARK_GREEN = fromRgb(0x00, 0xaa, 0x00);\n  static readonly LIGHT_CYAN = fromRgb(0x55, 0xff, 0xff);\n  static readonly DARK_CYAN = fromRgb(0x00, 0xaa, 0xaa);\n  static readonly LIGHT_BLUE = fromRgb(0x55, 0x55, 0xff);\n  static readonly DARK_BLUE = fromRgb(0x00, 0x00, 0xaa);\n  static readonly LIGHT_MAGENTA = fromRgb(0xff, 0x55, 0xff);\n  static readonly DARK_MAGENTA = fromRgb(0xaa, 0x00, 0xaa);\n  static readonly ORANGE = fromRgb(0xff, 0x88, 0x00);\n}\n","import {GUI} from '../gui';\nimport {Rect} from '../rect';\n\nexport abstract class Panel {\n  readonly gui: GUI;\n  readonly rect: Rect;\n  readonly modal: boolean;\n\n  constructor(gui: GUI, rect: Rect, modal?: boolean) {\n    this.gui = gui;\n    this.rect = rect;\n    this.modal = !!modal;\n  }\n\n  drawContents(): void {}\n\n  handleInput(): boolean {\n    return false;\n  }\n}\n","\nexport class Input {\n  down: boolean;\n  downCount: number;\n  upCount: number;\n\n  constructor() {\n    this.down = false;\n    this.downCount = 0;\n    this.upCount = 0;\n  }\n\n  update() {\n    if (this.down) {\n      this.downCount++;\n      this.upCount = 0;\n    } else {\n      this.downCount = 0;\n      this.upCount++;\n    }\n  }\n}\n","\nexport type Key = number;\n\nexport class Keys {\n  static readonly VK_CANCEL: Key = 3;\n  static readonly VK_HELP: Key = 6;\n  static readonly VK_BACK_SPACE: Key = 8;\n  static readonly VK_TAB: Key = 9;\n  static readonly VK_CLEAR: Key = 12;\n  static readonly VK_ENTER: Key = 13;\n  static readonly VK_SHIFT: Key = 16;\n  static readonly VK_CONTROL: Key = 17;\n  static readonly VK_ALT: Key = 18;\n  static readonly VK_PAUSE: Key = 19;\n  static readonly VK_CAPS_LOCK: Key = 20;\n  static readonly VK_ESCAPE: Key = 27;\n  static readonly VK_SPACE: Key = 32;\n  static readonly VK_PAGE_UP: Key = 33;\n  static readonly VK_PAGE_DOWN: Key = 34;\n  static readonly VK_END: Key = 35;\n  static readonly VK_HOME: Key = 36;\n  static readonly VK_LEFT: Key = 37;\n  static readonly VK_UP: Key = 38;\n  static readonly VK_RIGHT: Key = 39;\n  static readonly VK_DOWN: Key = 40;\n  static readonly VK_PRINTSCREEN: Key = 44;\n  static readonly VK_INSERT: Key = 45;\n  static readonly VK_DELETE: Key = 46;\n  static readonly VK_0: Key = 48;\n  static readonly VK_1: Key = 49;\n  static readonly VK_2: Key = 50;\n  static readonly VK_3: Key = 51;\n  static readonly VK_4: Key = 52;\n  static readonly VK_5: Key = 53;\n  static readonly VK_6: Key = 54;\n  static readonly VK_7: Key = 55;\n  static readonly VK_8: Key = 56;\n  static readonly VK_9: Key = 57;\n  static readonly VK_COLON: Key = 58;\n  static readonly VK_SEMICOLON: Key = 59;\n  static readonly VK_LESS_THAN: Key = 60;\n  static readonly VK_EQUALS: Key = 61;\n  static readonly VK_GREATER_THAN: Key = 62;\n  static readonly VK_QUESTION_MARK: Key = 63;\n  static readonly VK_AT: Key = 64;\n  static readonly VK_A: Key = 65;\n  static readonly VK_B: Key = 66;\n  static readonly VK_C: Key = 67;\n  static readonly VK_D: Key = 68;\n  static readonly VK_E: Key = 69;\n  static readonly VK_F: Key = 70;\n  static readonly VK_G: Key = 71;\n  static readonly VK_H: Key = 72;\n  static readonly VK_I: Key = 73;\n  static readonly VK_J: Key = 74;\n  static readonly VK_K: Key = 75;\n  static readonly VK_L: Key = 76;\n  static readonly VK_M: Key = 77;\n  static readonly VK_N: Key = 78;\n  static readonly VK_O: Key = 79;\n  static readonly VK_P: Key = 80;\n  static readonly VK_Q: Key = 81;\n  static readonly VK_R: Key = 82;\n  static readonly VK_S: Key = 83;\n  static readonly VK_T: Key = 84;\n  static readonly VK_U: Key = 85;\n  static readonly VK_V: Key = 86;\n  static readonly VK_W: Key = 87;\n  static readonly VK_X: Key = 88;\n  static readonly VK_Y: Key = 89;\n  static readonly VK_Z: Key = 90;\n  static readonly VK_CONTEXT_MENU: Key = 93;\n  static readonly VK_NUMPAD0: Key = 96;\n  static readonly VK_NUMPAD1: Key = 97;\n  static readonly VK_NUMPAD2: Key = 98;\n  static readonly VK_NUMPAD3: Key = 99;\n  static readonly VK_NUMPAD4: Key = 100;\n  static readonly VK_NUMPAD5: Key = 101;\n  static readonly VK_NUMPAD6: Key = 102;\n  static readonly VK_NUMPAD7: Key = 103;\n  static readonly VK_NUMPAD8: Key = 104;\n  static readonly VK_NUMPAD9: Key = 105;\n  static readonly VK_MULTIPLY: Key = 106;\n  static readonly VK_ADD: Key = 107;\n  static readonly VK_SEPARATOR: Key = 108;\n  static readonly VK_SUBTRACT: Key = 109;\n  static readonly VK_DECIMAL: Key = 110;\n  static readonly VK_DIVIDE: Key = 111;\n  static readonly VK_F1: Key = 112;\n  static readonly VK_F2: Key = 113;\n  static readonly VK_F3: Key = 114;\n  static readonly VK_F4: Key = 115;\n  static readonly VK_F5: Key = 116;\n  static readonly VK_F6: Key = 117;\n  static readonly VK_F7: Key = 118;\n  static readonly VK_F8: Key = 119;\n  static readonly VK_F9: Key = 120;\n  static readonly VK_F10: Key = 121;\n  static readonly VK_F11: Key = 122;\n  static readonly VK_F12: Key = 123;\n  static readonly VK_F13: Key = 124;\n  static readonly VK_F14: Key = 125;\n  static readonly VK_F15: Key = 126;\n  static readonly VK_F16: Key = 127;\n  static readonly VK_F17: Key = 128;\n  static readonly VK_F18: Key = 129;\n  static readonly VK_F19: Key = 130;\n  static readonly VK_F20: Key = 131;\n  static readonly VK_F21: Key = 132;\n  static readonly VK_F22: Key = 133;\n  static readonly VK_F23: Key = 134;\n  static readonly VK_F24: Key = 135;\n  static readonly VK_NUM_LOCK: Key = 144;\n  static readonly VK_SCROLL_LOCK: Key = 145;\n  static readonly VK_CIRCUMFLEX: Key = 160;\n  static readonly VK_EXCLAMATION: Key = 161;\n  static readonly VK_DOUBLE_QUOTE: Key = 162;\n  static readonly VK_HASH: Key = 163;\n  static readonly VK_DOLLAR: Key = 164;\n  static readonly VK_PERCENT: Key = 165;\n  static readonly VK_AMPERSAND: Key = 166;\n  static readonly VK_UNDERSCORE: Key = 167;\n  static readonly VK_OPEN_PAREN: Key = 168;\n  static readonly VK_CLOSE_PAREN: Key = 169;\n  static readonly VK_ASTERISK: Key = 170;\n  static readonly VK_PLUS: Key = 171;\n  static readonly VK_PIPE: Key = 172;\n  static readonly VK_HYPHEN_MINUS: Key = 173;\n  static readonly VK_OPEN_CURLY_BRACKET: Key = 174;\n  static readonly VK_CLOSE_CURLY_BRACKET: Key = 175;\n  static readonly VK_TILDE: Key = 176;\n  static readonly VK_COMMA: Key = 188;\n  static readonly VK_PERIOD: Key = 190;\n  static readonly VK_SLASH: Key = 191;\n  static readonly VK_BACK_QUOTE: Key = 192;\n  static readonly VK_OPEN_BRACKET: Key = 219;\n  static readonly VK_BACK_SLASH: Key = 220;\n  static readonly VK_CLOSE_BRACKET: Key = 221;\n  static readonly VK_QUOTE: Key = 222;\n  static readonly VK_META: Key = 224;\n  static readonly VK_ALTGR: Key = 225;\n  static readonly VK_WIN: Key = 91;\n  static readonly VK_KANA: Key = 21;\n  static readonly VK_HANGUL: Key = 21;\n  static readonly VK_EISU: Key = 22;\n  static readonly VK_JUNJA: Key = 23;\n  static readonly VK_FINAL: Key = 24;\n  static readonly VK_HANJA: Key = 25;\n  static readonly VK_KANJI: Key = 25;\n  static readonly VK_CONVERT: Key = 28;\n  static readonly VK_NONCONVERT: Key = 29;\n  static readonly VK_ACCEPT: Key = 30;\n  static readonly VK_MODECHANGE: Key = 31;\n  static readonly VK_SELECT: Key = 41;\n  static readonly VK_PRINT: Key = 42;\n  static readonly VK_EXECUTE: Key = 43;\n  static readonly VK_SLEEP: Key = 95;\n}\n","import {Entity} from '../entity';\n\nexport abstract class AI {\n  readonly entity: Entity;\n  activatedCount: number;\n\n  constructor(entity: Entity) {\n    this.entity = entity;\n    this.activatedCount = -1;\n  }\n\n  abstract doAi(): void;\n}","\nimport {Input} from './input';\n\n/**\n * Number of keys to track.\n */\nconst KEY_COUNT = 256;\n\nexport class Keyboard {\n  private readonly keys: Input[];\n\n  /**\n   * Creates a new keyboard module.\n   *\n   * @param el DOM el to attach listeners.\n   */\n  constructor(el: Element) {\n    this.keys = new Array(KEY_COUNT);\n    for (let i = 0; i < KEY_COUNT; i++) {\n      this.keys[i] = new Input();\n    }\n\n    el.addEventListener('keydown', e => this.setKey(e as KeyboardEvent, true));\n    el.addEventListener('keyup', e => this.setKey(e as KeyboardEvent, false));\n  }\n\n  private setKey(e: KeyboardEvent, state: boolean) {\n    e.stopPropagation();\n    e.preventDefault();\n    const keyCode = e.keyCode;\n    if (keyCode >= 0 && keyCode < KEY_COUNT) {\n      this.keys[keyCode].down = state;\n    }\n  }\n\n  update() {\n    for (let i = 0; i < KEY_COUNT; i++) {\n      if (this.keys[i].down) {\n        this.keys[i].downCount++;\n      } else {\n        this.keys[i].downCount = 0;\n      }\n    }\n  }\n\n  getKey(keyCode: number) {\n    return keyCode >= 0 && keyCode < KEY_COUNT ? this.keys[keyCode] : null;\n  }\n}\n","\nexport class ExtendedTexture extends WebGLTexture {\n  loaded: boolean;\n  width: number;\n  height: number;\n\n  constructor() {\n    super();\n    this.loaded = false;\n    this.width = 0;\n    this.height = 0;\n  }\n}\n\n/**\n * Initialize a shader program, so WebGL knows how to draw our data\n */\nexport function initShaderProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string): WebGLProgram {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n  const shaderProgram = gl.createProgram() as WebGLProgram;\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n  return shaderProgram;\n}\n\n/**\n * Creates a shader of the given type, uploads the source and\n * compiles it.\n */\nexport function loadShader(gl: WebGLRenderingContext, type: GLenum, source: string): WebGLShader {\n  const shader = gl.createShader(type) as WebGLShader;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  return shader;\n}\n\n/**\n * Initialize a texture and load an image.\n * When the image finished loading copy it into the texture.\n */\nexport function createTexture(gl: WebGLRenderingContext, url: string): ExtendedTexture {\n  const texture = gl.createTexture() as ExtendedTexture;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  // Because images have to be download over the internet\n  // they might take a moment until they are ready.\n  // Until then put a single pixel in the texture so we can\n  // use it immediately. When the image has finished downloading\n  // we'll update the texture with the contents of the image.\n  const level = 0;\n  const internalFormat = gl.RGBA;\n  const width = 1;\n  const height = 1;\n  const border = 0;\n  const srcFormat = gl.RGBA;\n  const srcType = gl.UNSIGNED_BYTE;\n  const pixel = new Uint8Array([0, 0, 0, 255]);\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\n\n  const image = new Image();\n  image.onload = () => {\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, image);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.generateMipmap(gl.TEXTURE_2D);\n    texture.loaded = true;\n    texture.width = image.width;\n    texture.height = image.height;\n  };\n  image.src = url;\n\n  return texture;\n}\n","import {App} from './app';\nimport {GUI} from './gui';\n\nexport class AppState {\n  readonly app: App;\n  readonly gui: GUI;\n\n  constructor(app: App) {\n    this.app = app;\n    this.gui = new GUI(app);\n  }\n\n  update() {\n    this.gui.handleInput();\n    this.gui.draw();\n  }\n}","\nimport {App} from './app';\nimport {DialogRenderer} from './gui/dialogrenderer';\nimport {Panel} from './gui/panel';\nimport {Rect} from './rect';\n\nexport class GUI {\n  readonly app: App;\n  readonly panels: Panel[];\n  readonly renderer: DialogRenderer;\n\n  constructor(app: App) {\n    this.app = app;\n    this.panels = [];\n    this.renderer = new DialogRenderer(new Rect(0, 0, 1, 1));\n  }\n\n  add(panel: Panel) {\n    this.panels.push(panel);\n  }\n\n  handleInput(): boolean {\n    for (let i = this.panels.length - 1; i >= 0; i--) {\n      const panel = this.panels[i];\n      if (panel.handleInput && panel.handleInput()) {\n        return true;\n      }\n      if (panel.modal) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  draw() {\n    for (let i = 0; i < this.panels.length; i++) {\n      this.panels[i].drawContents();\n    }\n  }\n}\n","\nimport {App} from '../app';\nimport {Rect} from '../rect';\n\nimport {Dialog} from './dialog';\n\nexport class DialogRenderer {\n  baseRect: Rect;\n\n  constructor(baseRect: Rect) {\n    this.baseRect = baseRect;\n  }\n\n  draw(app: App, dialog: Dialog) {\n    // Draws the dialog chrome using a 3x3 grid\n    // 0   1   2   3\n    //   x   x   x\n    // 1\n    //   x   x   x\n    // 2\n    //   x   x   x\n    // 3\n\n    // Source image is the baseRect\n    const sx0 = this.baseRect.x;\n    const sy0 = this.baseRect.y;\n    const sw = (this.baseRect.width / 3) | 0;\n    const sh = (this.baseRect.height / 3) | 0;\n    const sx1 = sx0 + sw;\n    const sy1 = sy0 + sh;\n    const sx2 = sx0 + 2 * sw;\n    const sy2 = sy0 + 2 * sw;\n\n    // Destination rect is the dialog\n    const dx0 = dialog.rect.x;\n    const dy0 = dialog.rect.y;\n    const dw = dialog.rect.width - 2 * sw;\n    const dh = dialog.rect.height - 2 * sh;\n    const dx1 = dx0 + sw;\n    const dy1 = dy0 + sh;\n    const dx2 = dx1 + dw;\n    const dy2 = dy1 + dh;\n\n    // Top-left corner\n    app.drawImage(dx0, dy0, sx0, sy0, sw, sh, undefined, sw, sh);\n\n    // Top edge\n    app.drawImage(dx1, dy0, sx1, sy0, sw, sh, undefined, dw, sh);\n\n    // Top-right corner\n    app.drawImage(dx2, dy0, sx2, sy0, sw, sh, undefined, sw, sh);\n\n    // Left edge\n    app.drawImage(dx0, dy1, sx0, sy1, sw, sh, undefined, sw, dh);\n\n    // Center\n    app.drawImage(dx1, dy1, sx1, sy1, sw, sh, undefined, dw, dh);\n\n    // Right edge\n    app.drawImage(dx2, dy1, sx2, sy1, sw, sh, undefined, sw, dh);\n\n    // Bottom-left corner\n    app.drawImage(dx0, dy2, sx0, sy2, sw, sh, undefined, sw, sh);\n\n    // Bottom edge\n    app.drawImage(dx1, dy2, sx1, sy2, sw, sh, undefined, dw, sh);\n\n    // Bottom-right corner\n    app.drawImage(dx2, dy2, sx2, sy2, sw, sh, undefined, sw, sh);\n  }\n}\n","\nexport type Color = number;\n\n/**\n * Creates a big-endian 32-bit RGBA color from red, green, and blue components.\n * @param r Red (0-255).\n * @param g Green (0-255).\n * @param b Blue (0-255).\n * @param a Optional alpha (0-255).\n * @return A 32-bit unsigned integer color.\n */\nexport function fromRgb(r: number, g: number, b: number, a?: number): Color {\n  if (a === undefined) {\n    a = 255;\n  }\n  return ((r << 24) + (g << 16) + (b << 8) + a) as Color;\n}\n\n\n/**\n * Converts a color from HSV format to RGBA format.\n *\n * Based on: https://stackoverflow.com/a/17243070/2051724\n *\n * @param h Hue (0.0 - 1.0).\n * @param s Saturation (0.0 - 1.0).\n * @param v Value (0.0 - 1.0).\n * @param a Optional alpha (0.0 - 1.0).\n * @return A 32-bit unsigned integer color.\n */\nexport function fromHsv(h: number, s: number, v: number, a?: number): Color {\n  const i = (h * 6) | 0;\n  const f = h * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  let r, g, b;\n  switch (i % 6) {\n    case 0:\n      r = v, g = t, b = p;\n      break;\n    case 1:\n      r = q, g = v, b = p;\n      break;\n    case 2:\n      r = p, g = v, b = t;\n      break;\n    case 3:\n      r = p, g = q, b = v;\n      break;\n    case 4:\n      r = t, g = p, b = v;\n      break;\n    case 5:\n      r = v, g = p, b = q;\n      break;\n    default:\n      r = 0;\n      g = 0;\n      b = 0;\n  }\n  if (a === undefined) {\n    a = 1.0;\n  }\n  return fromRgb((r * 255) | 0, (g * 255) | 0, (b * 255) | 0, (a * 255) | 0);\n}\n","\nimport {Entity} from '../entity';\n\nimport {Effect} from './effect';\n\nconst DURATION = 12;\n\nexport class BumpEffect extends Effect {\n  readonly entity: Entity;\n  readonly dx: number;\n  readonly dy: number;\n\n  constructor(entity: Entity, target: Entity) {\n    super(DURATION, true);\n    this.entity = entity;\n    this.dx = target.x - entity.x;\n    this.dy = target.y - entity.y;\n  }\n\n  update() {\n    const t = DURATION - this.countdown;\n\n    if (t >= 0 && t < 4) {\n      this.entity.offsetX += this.dx;\n      this.entity.offsetY += this.dy;\n    }\n\n    if (t >= 4 && t < 8) {\n      this.entity.offsetX -= this.dx;\n      this.entity.offsetY -= this.dy;\n    }\n\n    super.update();\n  }\n}\n","\nimport {App} from '../app';\nimport {Color} from '../color';\nimport {Colors} from '../colors';\nimport {Game} from '../game';\n\nimport {Effect} from './effect';\n\nexport class FloatingTextEffect extends Effect {\n  readonly str: string;\n  readonly pixelX: number;\n  readonly pixelY: number;\n  readonly color: Color;\n\n  constructor(str: string, pixelX: number, pixelY: number, color?: Color) {\n    super(40, false);\n    this.str = str;\n    this.pixelX = pixelX;\n    this.pixelY = pixelY;\n    this.color = color || Colors.WHITE;\n  }\n\n  draw(game: Game) {\n    const frame = 40 - this.countdown;\n    const x = this.pixelX - game.viewport.x;\n    const y = this.pixelY - game.viewport.y;\n    const y2 = y - Math.min(4, Math.floor(frame / 2));\n    game.app.drawCenteredString(this.str, x, y2, this.color);\n  }\n}\n","\nimport {Entity} from '../entity';\n\nimport {Effect} from './effect';\n\nexport class SlideEffect extends Effect {\n  readonly entity: Entity;\n  readonly dx: number;\n  readonly dy: number;\n\n  constructor(entity: Entity, dx: number, dy: number, count: number) {\n    super(count, true);\n    this.entity = entity;\n    this.dx = dx;\n    this.dy = dy;\n  }\n\n  update() {\n    this.countdown--;\n    if (this.countdown >= 0) {\n      this.entity.offsetX += this.dx;\n      this.entity.offsetY += this.dy;\n    }\n    if (this.countdown === 0) {\n      this.entity.x += this.entity.offsetX / this.entity.game.tileSize.width;\n      this.entity.y += this.entity.offsetY / this.entity.game.tileSize.height;\n      this.entity.offsetX = 0;\n      this.entity.offsetY = 0;\n    }\n  }\n}\n","import {Entity} from './entity';\nimport {TileMap, TileMapCell} from './tilemap';\nimport {Vec2} from './vec2';\n\n// const dxs = [-1, 0, 1, -1, 1, -1, 0, 1];\n// const dys = [-1, -1, -1, 0, 0, 1, 1, 1];\n// const costs = [1.5, 1, 1.5, 1, 1, 1.5, 1, 1.5];\n\nconst dxs = [0, -1, 1, 0];\nconst dys = [-1, 0, 0, 1];\nconst costs = [1, 1, 1, 1];\n\n/**\n * Calculates Dijkstra's algorithm.\n *\n * @param {!Object} source Starting point, must have x and y properties.\n * @param {!Object=} dest Optional destination point, must have x and y properties.\n * @param {!number=} maxDist Optional maximum distance to examine.\n * @return {?Array} Array of steps if destination found; null otherwise.\n */\nexport function computePath(map: TileMap, source: Vec2, dest: Vec2, maxDist: number) {\n  clearDijkstra(map, dest);\n\n  const sourceCell = map.grid[source.y][source.x];\n  sourceCell.g = 0.0;\n\n  const q: TileMapCell[] = [sourceCell];\n\n  while (q.length > 0) {\n    const u = getMinCell(q);\n\n    if (u.x === dest.x && u.y === dest.y) {\n      return buildPath(u);\n    }\n\n    for (let i = 0; i < dxs.length; i++) {\n      const x = u.x + dxs[i];\n      const y = u.y + dys[i];\n      if (x >= 0 && x < map.width && y >= 0 && y < map.height) {\n        const v = map.grid[y][x];\n        const alt = u.g + costs[i];\n        if (alt < v.g && alt <= maxDist && !map.grid[y][x].blocked) {\n          v.g = alt;\n          v.prev = u;\n          q.push(v);\n        }\n      }\n    }\n  }\n  return undefined;\n}\n\nfunction clearDijkstra(map: TileMap, dest: Vec2) {\n  for (let y = 0; y < map.height; y++) {\n    for (let x = 0; x < map.width; x++) {\n      const cell = map.grid[y][x];\n      cell.g = Infinity;\n      cell.h = Math.min(Math.abs(x - dest.x), Math.abs(y - dest.y));\n      cell.prev = null;\n    }\n  }\n}\n\nfunction getMinCell(q: TileMapCell[]): TileMapCell {\n  let bestCell = null;\n  let bestIndex = -1;\n  let minDist = Infinity;\n\n  for (let i = 0; i < q.length; i++) {\n    const cell = q[i];\n    if (cell.g !== Infinity && cell.g + cell.h < minDist) {\n      bestCell = cell;\n      bestIndex = i;\n      minDist = cell.g + cell.h;\n    }\n  }\n\n  q.splice(bestIndex, 1);\n  return bestCell as TileMapCell;\n}\n\nfunction buildPath(cell: TileMapCell) {\n  const result = [];\n  let curr: TileMapCell|null = cell;\n  while (curr) {\n    result.push(curr);\n    curr = curr.prev;\n  }\n  result.reverse();\n  return result;\n}\n","import {App} from './app';\nimport {Color} from './color';\n\nconst DEFAULT_TICKS_PER_FRAME = 30;\n\nexport class Sprite {\n  private static globalAnimIndex = 0;\n  readonly x: number;\n  readonly y: number;\n  readonly width: number;\n  readonly height: number;\n  readonly frames: number;\n  readonly loop: boolean;\n  readonly ticksPerFrame: number;\n  readonly colorOverride?: Color;\n  private animIndex: number;\n  private animDelay: number;\n\n  constructor(\n      x: number, y: number, width: number, height: number, frames?: number, loop?: boolean, ticksPerFrame?: number,\n      colorOverride?: Color) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.frames = frames || 1;\n    this.loop = !!loop;\n    this.ticksPerFrame = ticksPerFrame || DEFAULT_TICKS_PER_FRAME;\n    this.colorOverride = colorOverride;\n    this.animIndex = 0;\n    this.animDelay = 0;\n  }\n\n  draw(app: App, x: number, y: number) {\n    let frame = this.animIndex;\n    if (this.loop) {\n      frame = ((Sprite.globalAnimIndex / this.ticksPerFrame) | 0) % this.frames;\n    }\n\n    const u = this.x + frame * this.width;\n    const v = this.y;\n    app.drawImage(x, y, u, v, this.width, this.height, this.colorOverride);\n\n    this.animDelay++;\n    if (this.animDelay > this.ticksPerFrame) {\n      this.animDelay = 0;\n      this.animIndex++;\n      if (this.animIndex >= this.frames) {\n        if (this.loop) {\n          this.animIndex = 0;\n        } else {\n          this.animIndex = this.frames - 1;\n        }\n      }\n    }\n  }\n\n  static updateGlobalAnimations() {\n    Sprite.globalAnimIndex++;\n  }\n}\n","\n/**\n * Random number generator.\n *\n * LCG\n * https://stackoverflow.com/a/424445/2051724\n */\nexport class RNG {\n  private readonly m: number;\n  private readonly a: number;\n  private readonly c: number;\n  private state: number;\n\n  /**\n   * Creates a new random number generator.\n   *\n   * @param seed The integer seed.\n   */\n  constructor(seed?: number) {\n    // LCG using GCC's constants\n    this.m = 0x80000000;  // 2**31;\n    this.a = 1103515245;\n    this.c = 12345;\n    this.state = seed || 1;\n  }\n\n  private nextInt() {\n    this.state = (this.a * this.state + this.c) % this.m;\n    return this.state;\n  }\n\n  /**\n   * Returns a floating point number between 0.0 and 1.0.\n   */\n  nextFloat() {\n    // returns in range [0,1]\n    return this.nextInt() / (this.m - 1);\n  }\n\n  /**\n   * Returns an integer in the range start (inclusive) to end (exclusive).\n   * @param start Lower bound, inclusive.\n   * @param end Upper bound, exclusive.\n   */\n  nextRange(start: number, end: number) {\n    // returns in range [start, end): including start, excluding end\n    // can't modulu nextInt because of weak randomness in lower bits\n    const rangeSize = end - start;\n    const randomUnder1 = this.nextInt() / this.m;\n    return start + ((randomUnder1 * rangeSize) | 0);\n  }\n\n  chooseIndex(chances: number[]) {\n    const total = chances.reduce((a, b) => a + b);\n    const roll = this.nextRange(1, total + 1);\n    let runningTotal = 0;\n\n    for (let i = 0; i < chances.length; i++) {\n      runningTotal += chances[i];\n      if (roll <= runningTotal) {\n        return i;\n      }\n    }\n\n    return chances.length - 1;\n  }\n\n  chooseKey(chancesMap: {[key: string]: number}) {\n    const values: string[] = [];\n    const chances: number[] = [];\n\n    for (const property in chancesMap) {\n      if (chancesMap.hasOwnProperty(property)) {\n        values.push(property);\n        chances.push(chancesMap[property]);\n      }\n    }\n\n    return values[this.chooseIndex(chances)];\n  }\n}\n","import {GUI} from '../gui';\nimport {Rect} from '../rect';\n\nimport {Panel} from './panel';\n\nexport class Dialog extends Panel {\n  readonly title: string;\n\n  constructor(gui: GUI, rect: Rect, title: string) {\n    super(gui, rect, true);\n    this.title = title;\n  }\n\n  drawContents() {\n    this.gui.renderer.draw(this.gui.app, this);\n  }\n\n  handleInput() {\n    return false;\n  }\n\n  close() {\n    const panels = this.gui.panels;\n    const index = panels.indexOf(this);\n    if (index >= 0) {\n      panels.splice(index, 1);\n    }\n  }\n}\n","\nexport * from './app';\nexport * from './appstate';\nexport * from './color';\nexport * from './colors';\nexport * from './entity';\nexport * from './game';\nexport * from './gameoptions';\nexport * from './ai/ai';\nexport * from './ai/basicmonster';\nexport * from './ai/confusedmonster';\nexport * from './effects/bumpeffect';\nexport * from './effects/effect';\nexport * from './effects/floatingtexteffect';\nexport * from './effects/projectileeffect';\nexport * from './effects/slideeffect';\nexport * from './gui';\nexport * from './gui/dialog';\nexport * from './gui/dialogrenderer';\nexport * from './gui/imagepanel';\nexport * from './gui/panel';\nexport * from './gui/messagelog';\nexport * from './gui/selectdialog';\nexport * from './input';\nexport * from './keyboard';\nexport * from './keys';\nexport * from './path';\nexport * from './vec2';\nexport * from './rect';\nexport * from './rng';\nexport * from './sprite';\nexport * from './tilemap';\n","import {AppOptions} from './appoptions';\nimport {AppState} from './appstate';\nimport {Color} from './color';\nimport {Keyboard} from './keyboard';\nimport {Mouse} from './mouse';\nimport {Rect} from './rect';\nimport {RenderSet} from './renderset';\nimport {Vec2} from './vec2';\n\nconst DEFAULT_WIDTH = 400;\nconst DEFAULT_HEIGHT = 224;\nconst DEFAULT_GLYPH_WIDTH = 4;\nconst DEFAULT_GLYPH_HEIGHT = 8;\nconst DEFAULT_FILL_WINDOW = false;\nconst DEFAULT_SCALE_FACTOR = 2.0;\n\nexport class App {\n  readonly canvas: HTMLCanvasElement;\n  readonly gl: WebGLRenderingContext;\n  readonly size: Rect;\n  readonly glyphSize: Rect;\n  fillWindow: boolean;\n  scaleFactor: number;\n  aspectRatio: number;\n  readonly center: Vec2;\n  readonly renderSet: RenderSet;\n  readonly keyboard: Keyboard;\n  readonly mouse: Mouse;\n  state?: AppState;\n\n  constructor(options: AppOptions) {\n    const canvas = options.canvas;\n    if (!canvas) {\n      throw new Error('Null or missing canvas element');\n    }\n\n    const gl = canvas.getContext('webgl', {alpha: false, antialias: false});\n    if (!gl) {\n      throw new Error('Could not get WebGL context');\n    }\n\n    this.canvas = canvas;\n    this.gl = gl;\n    this.size = options.size || new Rect(0, 0, DEFAULT_WIDTH, DEFAULT_HEIGHT);\n    this.glyphSize = options.glyphSize || new Rect(0, 0, DEFAULT_GLYPH_WIDTH, DEFAULT_GLYPH_HEIGHT);\n    this.fillWindow = options.fillWindow || DEFAULT_FILL_WINDOW;\n    this.scaleFactor = options.scaleFactor || DEFAULT_SCALE_FACTOR;\n    this.aspectRatio = this.size.width / this.size.height;\n    this.center = new Vec2((this.size.width / 2) | 0, (this.size.height / 2) | 0);\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    canvas.width = this.size.width;\n    canvas.height = this.size.height;\n    canvas.style.outline = 'none';\n    canvas.tabIndex = 0;\n\n    this.renderSet = new RenderSet(gl, options.imageUrl, this.glyphSize);\n    this.keyboard = new Keyboard(canvas);\n    this.mouse = new Mouse(this);\n\n    if (this.fillWindow) {\n      window.addEventListener('resize', this.handleResizeEvent.bind(this), false);\n      this.handleResizeEvent();\n    }\n\n    this.renderLoop();\n  }\n\n  /**\n   * Handles window resize events.\n   * Updates canvas size.\n   */\n  handleResizeEvent() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    // The logic here is:\n    //  * Think of a rough \"minimum viewport\"\n    //  * The viewport is a rectangle that can be portrait or landscape\n    //  * The viewport can be a little bigger on desktop, a little smaller on mobile\n    //  * Find the integer scaling factor that best fits the minimum vector\n    const mobile = this.isMobile();\n    const minMajorAxis = mobile ? 320.0 : 400.0;\n    const minMinorAxis = mobile ? 180.0 : 224.0;\n\n    this.scaleFactor = 1.0;\n    if (width > height) {\n      this.scaleFactor = Math.max(1, Math.min(Math.round(width / minMajorAxis), Math.round(height / minMinorAxis)));\n    } else {\n      this.scaleFactor = Math.max(1, Math.min(Math.round(width / minMinorAxis), Math.round(height / minMajorAxis)));\n    }\n\n    this.size.width = Math.round(width / this.scaleFactor);\n    this.size.height = Math.round(height / this.scaleFactor);\n    this.aspectRatio = this.size.width / this.size.height;\n    this.center.x = (this.size.width / 2) | 0;\n    this.center.y = (this.size.height / 2) | 0;\n\n    this.canvas.width = this.size.width;\n    this.canvas.height = this.size.height;\n    this.canvas.style.left = '0';\n    this.canvas.style.top = '0';\n    this.canvas.style.width = width + 'px';\n    this.canvas.style.height = height + 'px';\n  }\n\n  /**\n   * Returns if the browser is on a mobile device.\n   */\n  isMobile() {\n    return navigator.userAgent.match(/Android|iPhone|iPad|iPod|IEMobile|WPDesktop|Opera Mini/i);\n  }\n\n  renderLoop() {\n    this.keyboard.update();\n    this.mouse.update();\n    this.resetGl();\n\n    if (this.state) {\n      this.state.update();\n    }\n\n    this.renderSet.flush(this.size.width, this.size.height);\n    requestAnimationFrame(this.renderLoop.bind(this));\n  }\n\n  private resetGl() {\n    const gl = this.gl;\n    gl.viewport(0, 0, this.size.width, this.size.height);\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Reset sprite index buffers\n    this.renderSet.positionArrayIndex = 0;\n    this.renderSet.texcoordArrayIndex = 0;\n    this.renderSet.colorArrayIndex = 0;\n  }\n\n  /**\n   * Draws a sprite.\n   * @param {number} x The x-coordinate of the top-left corner on the screen.\n   * @param {number} y The y-coordinate of the top-left corner on the screen.\n   * @param {number} u The x-coordinate of the top-left corner on the sprite sheet.\n   * @param {number} v The y-coordinate of the top-left corner on the sprite sheet.\n   * @param {number} w The width of the sprite.\n   * @param {number} h The height of the sprite.\n   * @param {Color=} color Optional color.\n   * @param {number=} dw Optional destination width.\n   * @param {number=} dh Optional destination height.\n   */\n  drawImage(x: number, y: number, u: number, v: number, w: number, h: number, color?: Color, dw?: number, dh?: number) {\n    this.renderSet.drawImage(x, y, u, v, w, h, color, dw, dh);\n  }\n\n  /**\n   * Draws a string.\n   * @param {string} str The text string to draw.\n   * @param {number} x The x-coordinate of the top-left corner.\n   * @param {number} y The y-coordinate of the top-left corner.\n   * @param {Color=} color Optional color.\n   */\n  drawString(str: string, x: number, y: number, color?: Color) {\n    this.renderSet.drawString(str, x, y, color);\n  }\n\n  /**\n   * Draws a string horizontally centered.\n   * @param {string} str The text string to draw.\n   * @param {number} x The x-coordinate of the center.\n   * @param {number} y The y-coordinate of the top-left corner.\n   * @param {Color=} color Optional color.\n   */\n  drawCenteredString(str: string, x: number, y: number, color?: Color) {\n    this.renderSet.drawCenteredString(str, x, y, color);\n  }\n\n  isKeyDown(keyCode: number) {\n    const key = this.keyboard.getKey(keyCode);\n    return key && key.down;\n  }\n\n  isKeyPressed(keyCode: number) {\n    const key = this.keyboard.getKey(keyCode);\n    const count = key ? key.downCount : 0;\n    return count === 1 || (count > 30);\n  }\n}\n","\nimport {App} from './app';\nimport {Input} from './input';\nimport {Rect} from './rect';\n\nexport class Mouse extends Input {\n  private readonly app: App;\n  private prevX: number;\n  private prevY: number;\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n\n  constructor(app: App) {\n    super();\n    this.app = app;\n    this.prevX = 0;\n    this.prevY = 0;\n    this.x = 0;\n    this.y = 0;\n    this.dx = 0;\n    this.dy = 0;\n\n    const el = app.canvas;\n\n    const mouseEventHandler = this.handleEvent.bind(this);\n    el.addEventListener('mousedown', mouseEventHandler);\n    el.addEventListener('mouseup', mouseEventHandler);\n    el.addEventListener('mousemove', mouseEventHandler);\n    el.addEventListener('contextmenu', mouseEventHandler);\n\n    const touchEventHandler = this.handleTouchEvent.bind(this);\n    el.addEventListener('touchstart', touchEventHandler);\n    el.addEventListener('touchend', touchEventHandler);\n    el.addEventListener('touchcancel', touchEventHandler);\n    el.addEventListener('touchmove', touchEventHandler);\n  }\n\n  private handleTouchEvent(e: TouchEvent) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (e.touches.length > 0) {\n      const touch = e.touches[0];\n      this.updatePosition(touch.clientX, touch.clientY);\n      this.down = true;\n    } else {\n      this.down = false;\n    }\n  }\n\n  private handleEvent(e: MouseEvent) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    this.updatePosition(e.clientX, e.clientY);\n\n    if (e.type === 'mousedown') {\n      this.down = true;\n      this.app.canvas.focus();\n    }\n\n    if (e.type === 'mouseup') {\n      this.down = false;\n    }\n  }\n\n  private updatePosition(clientX: number, clientY: number) {\n    let rect: ClientRect|DOMRect|Rect = this.app.canvas.getBoundingClientRect();\n\n    // If the client rect is not the same aspect ratio as canvas,\n    // then we are fullscreen.\n    // Need to update client rect accordingly.\n\n    const terminalAspectRatio = this.app.size.width / this.app.size.height;\n    const rectAspectRatio = rect.width / rect.height;\n\n    if (rectAspectRatio - terminalAspectRatio > 0.01) {\n      const actualWidth = terminalAspectRatio * rect.height;\n      const excess = rect.width - actualWidth;\n      rect = new Rect(Math.floor(excess / 2), 0, actualWidth, rect.height);\n    }\n\n    if (rectAspectRatio - terminalAspectRatio < -0.01) {\n      const actualHeight = rect.width / terminalAspectRatio;\n      const excess = rect.height - actualHeight;\n      rect = new Rect(0, Math.floor(excess / 2), rect.width, actualHeight);\n    }\n\n    this.x = (this.app.size.width * (clientX - rect.left) / rect.width) | 0;\n    this.y = (this.app.size.height * (clientY - rect.top) / rect.height) | 0;\n  }\n\n  update() {\n    super.update();\n    this.dx = this.x - this.prevX;\n    this.dy = this.y - this.prevY;\n    this.prevX = this.x;\n    this.prevY = this.y;\n  }\n}","\nimport {Color} from './color';\nimport {createTexture, ExtendedTexture, initShaderProgram} from './glutils';\nimport {Rect} from './rect';\n\n/**\n * Maximum number of elements per buffer.\n *\n * Some browsers / video cards allow large buffers, but 16-bit is the safe max.\n * https://stackoverflow.com/a/5018021/2051724\n *\n * @const {number}\n */\nconst BUFFER_SIZE = 65536;\n\nconst spriteVertexShader = 'uniform vec2 u_viewportSize;' +\n    'attribute vec2 a_position;' +\n    'attribute vec2 a_texCoord;' +\n    'attribute vec4 a_color;' +\n    'varying vec2 v_texCoord;' +\n    'varying vec4 v_color;' +\n    'void main() {' +\n\n    // convert the rectangle from pixels to 0.0 to 1.0\n    'vec2 zeroToOne = a_position / u_viewportSize;' +\n\n    // convert from 0->1 to 0->2\n    'vec2 zeroToTwo = zeroToOne * 2.0;' +\n\n    // convert from 0->2 to -1->+1 (clipspace)\n    'vec2 clipSpace = zeroToTwo - 1.0;' +\n\n    'gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);' +\n\n    // pass the texCoord to the fragment shader\n    // The GPU will interpolate this value between points.\n    'v_texCoord = a_texCoord;' +\n    'v_color = a_color;' +\n    '}';\n\nconst spriteFragmentShader = 'precision highp float;' +\n\n    // our texture\n    'uniform sampler2D u_image;' +\n\n    // the texCoords passed in from the vertex shader.\n    'varying vec2 v_texCoord;' +\n\n    // the color overrides passed in from the vertex shader.\n    'varying vec4 v_color;' +\n\n    'void main() {' +\n    'gl_FragColor = texture2D(u_image, v_texCoord);' +\n    'if (gl_FragColor.a < 0.1) discard;' +\n    'if (v_color.a > 0.5) gl_FragColor = v_color;' +\n    '}';\n\nexport class RenderSet {\n  readonly glyphSize: Rect;\n  readonly gl: WebGLRenderingContext;\n  readonly program: WebGLProgram;\n  readonly viewportSizeLocation: WebGLUniformLocation;\n  readonly positionLocation: number;\n  readonly texcoordLocation: number;\n  readonly colorLocation: number;\n  readonly positionBuffer: WebGLBuffer;\n  readonly texcoordBuffer: WebGLBuffer;\n  readonly colorBuffer: WebGLBuffer;\n  readonly spriteTexture: ExtendedTexture;\n  readonly positionArray: Float32Array;\n  positionArrayIndex: number;\n  readonly texcoordArray: Float32Array;\n  texcoordArrayIndex: number;\n  readonly colorUint8Array: Uint8Array;\n  readonly colorDataView: DataView;\n  colorArrayIndex: number;\n\n  constructor(gl: WebGLRenderingContext, url: string, glyphSize: Rect) {\n    this.gl = gl;\n    this.glyphSize = glyphSize;\n\n    const program = initShaderProgram(gl, spriteVertexShader, spriteFragmentShader);\n\n    this.program = program;\n    this.viewportSizeLocation = gl.getUniformLocation(program, 'u_viewportSize') as WebGLUniformLocation;\n    this.positionLocation = gl.getAttribLocation(program, 'a_position');\n    this.texcoordLocation = gl.getAttribLocation(program, 'a_texCoord');\n    this.colorLocation = gl.getAttribLocation(program, 'a_color');\n    this.positionBuffer = gl.createBuffer() as WebGLBuffer;\n    this.texcoordBuffer = gl.createBuffer() as WebGLBuffer;\n    this.colorBuffer = gl.createBuffer() as WebGLBuffer;\n    this.spriteTexture = createTexture(gl, url);\n    this.positionArray = new Float32Array(BUFFER_SIZE);\n    this.positionArrayIndex = 0;\n    this.texcoordArray = new Float32Array(BUFFER_SIZE);\n    this.texcoordArrayIndex = 0;\n    this.colorUint8Array = new Uint8Array(BUFFER_SIZE);\n    this.colorDataView = new DataView(this.colorUint8Array.buffer);\n    this.colorArrayIndex = 0;\n  }\n\n  /**\n   * Draws a string horizontally centered.\n   * @param {string} str The text string to draw.\n   * @param {number} x The x-coordinate of the center.\n   * @param {number} y The y-coordinate of the top-left corner.\n   * @param {number=} color Optional color.\n   */\n  drawCenteredString(str: string, x: number, y: number, color?: Color) {\n    const x2 = x - ((this.glyphSize.width * str.length) / 2) | 0;\n    this.drawString(str, x2, y, color);\n  }\n\n  /**\n   * Draws a string.\n   * @param {string} str The text string to draw.\n   * @param {number} x The x-coordinate of the top-left corner.\n   * @param {number} y The y-coordinate of the top-left corner.\n   * @param {number=} color Optional color.\n   */\n  drawString(str: string, x: number, y: number, color?: Color) {\n    const lines = str.split('\\n');\n    const glyphWidth = this.glyphSize.width;\n    const glyphHeight = this.glyphSize.height;\n    for (let i = 0; i < lines.length; i++) {\n      for (let j = 0; j < lines[i].length; j++) {\n        this.drawChar(lines[i].charCodeAt(j), x + j * glyphWidth, y + i * glyphHeight, color);\n      }\n    }\n  }\n\n  /**\n   * Draws a character.\n   * @param {number} c The ASCII character code.\n   * @param {number} x The x-coordinate of the top-left corner.\n   * @param {number} y The y-coordinate of the top-left corner.\n   * @param {number=} color Optional color.\n   */\n  drawChar(c: number, x: number, y: number, color?: Color) {\n    if (c >= 33 && c <= 127) {\n      this.drawImage(x, y, (c - 33) * 8, 0, 8, 10, color);\n    }\n  }\n\n  /**\n   * Draws a sprite.\n   * @param {number} x The x-coordinate of the top-left corner on the screen.\n   * @param {number} y The y-coordinate of the top-left corner on the screen.\n   * @param {number} u The x-coordinate of the top-left corner on the sprite sheet.\n   * @param {number} v The y-coordinate of the top-left corner on the sprite sheet.\n   * @param {number} w The width of the sprite.\n   * @param {number} h The height of the sprite.\n   * @param {number=} color Optional color.\n   * @param {number=} dw Optional destination width.\n   * @param {number=} dh Optional destination height.\n   */\n  drawImage(\n      x: number, y: number, u: number, v: number, w: number, h: number, optColor?: Color, optDw?: number,\n      optDh?: number) {\n    const spriteTexture = this.spriteTexture;\n    if (!spriteTexture.loaded) {\n      return;\n    }\n\n    const dw = optDw !== undefined ? optDw : w;\n    const dh = optDh !== undefined ? optDh : h;\n    const x2 = x + Math.abs(dw);\n    const y2 = y + dh;\n    const tx = u / spriteTexture.width;\n    const ty = v / spriteTexture.height;\n    const tx2 = (u + w) / spriteTexture.width;\n    const ty2 = (v + h) / spriteTexture.height;\n    const color = optColor || 0;\n\n    // First triangle\n    this.positionArray[this.positionArrayIndex++] = x;\n    this.positionArray[this.positionArrayIndex++] = y;\n    this.positionArray[this.positionArrayIndex++] = x2;\n    this.positionArray[this.positionArrayIndex++] = y;\n    this.positionArray[this.positionArrayIndex++] = x;\n    this.positionArray[this.positionArrayIndex++] = y2;\n\n    this.texcoordArray[this.texcoordArrayIndex++] = tx;\n    this.texcoordArray[this.texcoordArrayIndex++] = ty;\n    this.texcoordArray[this.texcoordArrayIndex++] = tx2;\n    this.texcoordArray[this.texcoordArrayIndex++] = ty;\n    this.texcoordArray[this.texcoordArrayIndex++] = tx;\n    this.texcoordArray[this.texcoordArrayIndex++] = ty2;\n\n    // Second triangle\n    this.positionArray[this.positionArrayIndex++] = x;\n    this.positionArray[this.positionArrayIndex++] = y2;\n    this.positionArray[this.positionArrayIndex++] = x2;\n    this.positionArray[this.positionArrayIndex++] = y;\n    this.positionArray[this.positionArrayIndex++] = x2;\n    this.positionArray[this.positionArrayIndex++] = y2;\n\n    this.texcoordArray[this.texcoordArrayIndex++] = tx;\n    this.texcoordArray[this.texcoordArrayIndex++] = ty2;\n    this.texcoordArray[this.texcoordArrayIndex++] = tx2;\n    this.texcoordArray[this.texcoordArrayIndex++] = ty;\n    this.texcoordArray[this.texcoordArrayIndex++] = tx2;\n    this.texcoordArray[this.texcoordArrayIndex++] = ty2;\n\n    for (let i = 0; i < 6; i++) {\n      this.colorDataView.setUint32(this.colorArrayIndex, color, false);\n      this.colorArrayIndex += 4;\n    }\n  }\n\n  /**\n   * Renders all sprites in the sprite buffers to the screen.\n   * @param {number} width Viewport width.\n   * @param {number} height Viewport height.\n   */\n  flush(width: number, height: number) {\n    if (!this.spriteTexture.loaded || this.positionArrayIndex === 0) {\n      return;\n    }\n\n    const gl = this.gl;\n\n    // Tell it to use our program (pair of shaders)\n    gl.useProgram(this.program);\n\n    // Update the viewport\n    gl.uniform2f(this.viewportSizeLocation, width, height);\n\n    // Use the leonardo spriteTexture\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.spriteTexture);\n\n    {\n      // Bind the position buffer.\n      gl.enableVertexAttribArray(this.positionLocation);\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, this.positionArray, gl.DYNAMIC_DRAW);\n\n      // Tell the position attribute how to get data out of positionBuffer\n      // (ARRAY_BUFFER)\n      const size = 2;           // 2 components per iteration\n      const type = gl.FLOAT;    // the data is 32bit floats\n      const normalize = false;  // don't normalize the data\n      const stride = 0;         // 0 = move forward size * sizeof(type) each iteration\n                                // to get the next position\n      const offset = 0;         // start at the beginning of the buffer\n      gl.vertexAttribPointer(this.positionLocation, size, type, normalize, stride, offset);\n    }\n\n    {\n      // Bind the texture coordinate buffer.\n      gl.enableVertexAttribArray(this.texcoordLocation);\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, this.texcoordArray, gl.DYNAMIC_DRAW);\n\n      // Tell the position attribute how to get data out of positionBuffer\n      // (ARRAY_BUFFER)\n      const size = 2;           // 2 components per iteration\n      const type = gl.FLOAT;    // the data is 32bit floats\n      const normalize = false;  // don't normalize the data\n      const stride = 0;         // 0 = move forward size * sizeof(type) each iteration\n                                // to get the next position\n      const offset = 0;         // start at the beginning of the buffer\n      gl.vertexAttribPointer(this.texcoordLocation, size, type, normalize, stride, offset);\n    }\n\n    {\n      // Bind the color buffer.\n      gl.enableVertexAttribArray(this.colorLocation);\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, this.colorUint8Array, gl.DYNAMIC_DRAW);\n\n      // Tell the position attribute how to get data out of positionBuffer\n      // (ARRAY_BUFFER)\n      const size = 4;                 // 4 components per iteration\n      const type = gl.UNSIGNED_BYTE;  // the data is 8-bit unsigned bytes\n      const normalize = true;         // Normalize from 0-255 to 0.0-1.0\n      const stride = 0;               // 0 = move forward size * sizeof(type) each iteration\n                                      // to get the next position\n      const offset = 0;               // start at the beginning of the buffer\n      gl.vertexAttribPointer(this.colorLocation, size, type, normalize, stride, offset);\n    }\n\n    // Draw the rectangle.\n    const primitiveType = gl.TRIANGLES;\n    const offset = 0;\n    const count = this.positionArrayIndex / 2;\n    gl.drawArrays(primitiveType, offset, count);\n  }\n}\n","import {AI} from './ai/ai';\nimport {Colors} from './colors';\nimport {BumpEffect} from './effects/bumpeffect';\nimport {FloatingTextEffect} from './effects/floatingtexteffect';\nimport {SlideEffect} from './effects/slideeffect';\nimport {Game} from './game';\nimport {SelectOption} from './gui/selectoption';\nimport {Sprite} from './sprite';\nimport {Vec2} from './vec2';\nimport {XArray} from './xarray';\n\nexport class Entity extends Vec2 implements SelectOption {\n  readonly game: Game;\n  offsetX: number;\n  offsetY: number;\n  name: string;\n  sprite: Sprite;\n  blocks: boolean;\n  health: number;\n  maxHealth: number;\n  actionPoints: number;\n  inventory: XArray<Entity>;\n  ai?: AI;\n  canPickup: boolean;\n  canAttack: boolean;\n  onBump?: Function;\n  onAttack?: Function;\n  onDamage?: Function;\n  onDeath?: Function;\n  onPickup?: Function;\n  onUse?: Function;\n\n  constructor(game: Game, x: number, y: number, name: string, sprite: Sprite, blocks: boolean) {\n    super(x, y);\n    this.game = game;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.name = name;\n    this.sprite = sprite;\n    this.blocks = blocks;\n    this.health = 100;\n    this.maxHealth = 100;\n    this.actionPoints = 1;\n    this.inventory = new XArray<Entity>();\n    this.canPickup = false;\n    this.canAttack = false;\n  }\n\n  get pixelX(): number {\n    return this.x * this.game.tileSize.width + this.offsetX;\n  }\n\n  get pixelY(): number {\n    return this.y * this.game.tileSize.height + this.offsetY;\n  }\n\n  move(dx: number, dy: number) {\n    const destX = this.x + dx;\n    const destY = this.y + dy;\n\n    if (this.game.tileMap && this.game.tileMap.isBlocked(destX, destY)) {\n      return false;\n    }\n\n    const count = 4;\n    const xSpeed = this.game.tileSize.width / count;\n    const ySpeed = this.game.tileSize.height / count;\n    this.game.effects.push(new SlideEffect(this, dx * xSpeed, dy * ySpeed, count));\n    this.game.blocked = true;\n    this.actionPoints--;\n    return true;\n  }\n\n  moveToward(targetX: number, targetY: number) {\n    const dx = targetX - this.x;\n    const dy = targetY - this.y;\n    const distance = Math.hypot(dx, dy);\n    this.move(Math.round(dx / distance), Math.round(dy / distance));\n  }\n\n  tryMoveOrAttack(dx: number, dy: number) {\n    const destX = this.x + dx;\n    const destY = this.y + dy;\n\n    for (let i = 0; i < this.game.entities.length; i++) {\n      const other = this.game.entities[i];\n      if (this !== other && other.x === destX && other.y === destY) {\n        if (this.onBump) {\n          if (this.onBump(other)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return this.move(dx, dy);\n  }\n\n  attack(target: Entity) {\n    const damage = 10;\n\n    if (this.onAttack) {\n      this.onAttack(this, target, damage);\n    }\n\n    target.takeDamage(damage);\n    this.actionPoints--;\n    this.game.effects.push(new BumpEffect(this, target));\n    this.game.blocked = true;\n  }\n\n  takeDamage(damage: number) {\n    this.health -= damage;\n\n    this.game.effects.push(new FloatingTextEffect(damage.toString(), this.pixelX + 8, this.pixelY - 4, Colors.RED));\n\n    if (this.onDamage) {\n      this.onDamage(this);\n    }\n\n    if (this.health <= 0) {\n      this.health = 0;\n      if (this.onDeath) {\n        this.onDeath(this);\n      }\n\n      const index = this.game.entities.indexOf(this);\n      if (index >= 0) {\n        this.game.entities.splice(index, 1);\n      }\n    }\n  }\n\n  pickup(item: Entity) {\n    if (item.onPickup) {\n      item.onPickup(this, item);\n    }\n    // item.container = this.player.inventory;\n    this.inventory.push(item);\n    const index = this.game.entities.indexOf(item);\n    if (index >= 0) {\n      this.game.entities.splice(index, 1);\n    }\n  }\n\n  use() {\n    if (!this.onUse) {\n      return false;\n    }\n    this.onUse(this);\n    return true;\n  }\n\n  distanceTo(other: Entity) {\n    return Math.hypot(other.x - this.x, other.y - this.y);\n  }\n\n  distance(x: number, y: number) {\n    return Math.hypot(x - this.x, y - this.y);\n  }\n\n  draw() {\n    this.sprite.draw(this.game.app, this.pixelX - this.game.viewport.x, this.pixelY - this.game.viewport.y);\n  }\n\n  sendToBack() {}\n}\n","\nexport class XArray<T> extends Array<T> {\n  remove(el: T) {\n    const index = this.indexOf(el);\n    if (index >= 0) {\n      this.splice(index, 1);\n    }\n  }\n}","import {App} from './app';\nimport {AppState} from './appstate';\nimport {Effect} from './effects/effect';\nimport {Entity} from './entity';\nimport {GameOptions} from './gameoptions';\nimport {Keys} from './keys';\nimport {computePath} from './path';\nimport {Rect} from './rect';\nimport {Sprite} from './sprite';\nimport {TileMap, TileMapCell} from './tilemap';\nimport {Vec2} from './vec2';\n\nconst DEFAULT_TILE_WIDTH = 16;\nconst DEFAULT_TILE_HEIGHT = 16;\n\nexport class Game extends AppState {\n  readonly tileSize: Rect;\n  readonly viewport: Rect;\n  readonly effects: Effect[];\n  readonly entities: Entity[];\n  readonly cursor: Vec2;\n  turnIndex: number;\n  blocked: boolean;\n  targetCallback?: Function;\n  targetSprite?: Sprite;\n  targetTile?: TileMapCell;\n  targetEntity?: Entity;\n  path?: TileMapCell[];\n  pathIndex: number;\n  onUpdate?: Function;\n  tileMap?: TileMap;\n  player?: Entity;\n\n  constructor(app: App, options: GameOptions) {\n    super(app);\n    this.tileSize = options.tileSize || new Rect(0, 0, DEFAULT_TILE_WIDTH, DEFAULT_TILE_HEIGHT);\n    this.viewport = new Rect(0, 0, app.size.width, app.size.height);\n    this.effects = [];\n    this.entities = [];\n    this.turnIndex = 0;\n    this.blocked = false;\n    this.cursor = new Vec2(-1, -1);\n    this.pathIndex = 0;\n  }\n\n  update() {\n    Sprite.updateGlobalAnimations();\n\n    if (!this.gui.handleInput()) {\n      this.updateEffects();\n      this.updateEntities();\n\n      if (this.onUpdate) {\n        this.onUpdate();\n      }\n\n      this.updateViewport();\n    }\n\n    this.drawTileMap();\n    this.drawTargeting();\n    this.drawEntities();\n    this.drawEffects();\n    this.gui.draw();\n  }\n\n  private updateEffects() {\n    // Reset blocked\n    this.blocked = false;\n\n    // Update effects\n    for (let i = 0; i < this.effects.length; i++) {\n      const effect = this.effects[i];\n      if (!effect.blocking || !this.blocked) {\n        effect.update();\n        if (effect.blocking) {\n          this.blocked = true;\n        }\n      }\n    }\n\n    // Remove completed effects\n    for (let i = this.effects.length - 1; i >= 0; i--) {\n      if (this.effects[i].isDone()) {\n        this.effects.splice(i, 1);\n      }\n    }\n  }\n\n  private updateEntities() {\n    // If not blocked on any animations,\n    // then try to do enemy AI\n    // const startTurnIndex = this.turnIndex;\n    let turnCount = 0;\n    while (true) {\n      if (this.turnIndex < 0 || this.turnIndex >= this.entities.length) {\n        // Turn index out of range\n        break;\n      }\n\n      if (turnCount > this.entities.length * 2) {\n        // Looped back to original entity\n        // In that case, quit to next frame to avoid infinite loops\n        break;\n      }\n\n      const currEntity = this.entities[this.turnIndex];\n      if (currEntity.actionPoints > 0) {\n        if (currEntity === this.player) {\n          this.handlePlayerInput();\n          break;\n        } else {\n          this.doAi(currEntity);\n        }\n      }\n      if (!this.blocked && currEntity.actionPoints <= 0) {\n        // Turn is over\n        currEntity.actionPoints = 0;\n        this.nextTurn();\n      }\n      if (this.blocked) {\n        // Waiting for animations\n        break;\n      }\n\n      turnCount++;\n    }\n  }\n\n  private updateViewport() {\n    if (this.player) {\n      const horizontalMargin = (this.app.size.width * 0.4) | 0;\n      const verticalMargin = (this.app.size.height * 0.4) | 0;\n\n      if (this.player.pixelX - this.viewport.x < horizontalMargin) {\n        this.viewport.x = this.player.pixelX - horizontalMargin;\n      }\n\n      if (this.viewport.x + this.viewport.width - (this.player.pixelX + this.tileSize.width) < horizontalMargin) {\n        this.viewport.x = this.player.pixelX + this.tileSize.width + horizontalMargin - this.viewport.width;\n      }\n\n      if (this.player.pixelY - this.viewport.y < verticalMargin) {\n        this.viewport.y = this.player.pixelY - verticalMargin;\n      }\n\n      if (this.viewport.y + this.viewport.height - (this.player.pixelY + this.tileSize.height) < verticalMargin) {\n        this.viewport.y = this.player.pixelY + this.tileSize.height + verticalMargin - this.viewport.height;\n      }\n\n      this.viewport.width = this.app.size.width;\n      this.viewport.height = this.app.size.height;\n    }\n  }\n\n  private drawTileMap() {\n    if (this.app.renderSet.spriteTexture.loaded && this.tileMap) {\n      this.tileMap.draw(this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height);\n    }\n  }\n\n  private drawTargeting() {\n    if (this.isTargeting() && this.targetSprite) {\n      const x = this.cursor.x * this.tileSize.width - this.viewport.x;\n      const y = this.cursor.y * this.tileSize.height - this.viewport.y;\n      this.targetSprite.draw(this.app, x, y);\n    }\n  }\n\n  private drawEntities() {\n    for (let i = 0; i < this.entities.length; i++) {\n      const entity = this.entities[i];\n      if (!this.tileMap || this.tileMap.isVisible(entity.x, entity.y)) {\n        entity.draw();\n      }\n    }\n  }\n\n  private drawEffects() {\n    let blockingCount = 0;\n    for (let i = 0; i < this.effects.length; i++) {\n      const effect = this.effects[i];\n      if (blockingCount === 0 || !effect.blocking) {\n        effect.draw(this);\n      }\n      if (effect.blocking) {\n        blockingCount++;\n      }\n    }\n  }\n\n  isTargeting() {\n    return !!this.targetCallback;\n  }\n\n  startTargeting(callback: Function) {\n    this.targetCallback = callback;\n    if (this.player) {\n      this.cursor.x = this.player.x;\n      this.cursor.y = this.player.y;\n    }\n  }\n\n  private endTargeting() {\n    if (this.targetCallback) {\n      this.targetCallback(this.cursor.x, this.cursor.y);\n    }\n    this.cancelTargeting();\n  }\n\n  cancelTargeting() {\n    this.targetCallback = undefined;\n  }\n\n  private handlePlayerInput() {\n    if (!this.player || this.blocked) {\n      return;\n    }\n\n    if (this.app.mouse.dx !== 0 || this.app.mouse.dy !== 0) {\n      this.cursor.x = ((this.viewport.x + this.app.mouse.x) / this.tileSize.width) | 0;\n      this.cursor.y = ((this.viewport.y + this.app.mouse.y) / this.tileSize.height) | 0;\n    }\n\n    if (this.isTargeting()) {\n      if (this.app.isKeyPressed(Keys.VK_ENTER) || this.app.mouse.upCount === 1) {\n        this.endTargeting();\n      }\n      if (this.app.isKeyPressed(Keys.VK_ESCAPE)) {\n        this.cancelTargeting();\n      }\n      if (this.app.isKeyPressed(Keys.VK_UP)) {\n        this.cursor.y--;\n      }\n      if (this.app.isKeyPressed(Keys.VK_LEFT)) {\n        this.cursor.x--;\n      }\n      if (this.app.isKeyPressed(Keys.VK_RIGHT)) {\n        this.cursor.x++;\n      }\n      if (this.app.isKeyPressed(Keys.VK_DOWN)) {\n        this.cursor.y++;\n      }\n      return;\n    }\n\n    if (this.app.mouse.upCount === 1) {\n      const tx = ((this.viewport.x + this.app.mouse.x) / this.tileSize.width) | 0;\n      const ty = ((this.viewport.y + this.app.mouse.y) / this.tileSize.height) | 0;\n\n      this.targetEntity = this.getEnemyAt(tx, ty);\n      if (this.targetEntity) {\n        this.targetTile = undefined;\n        this.path = undefined;\n        if (this.player.distance(this.targetEntity.x, this.targetEntity.y) <= 1.0) {\n          this.player.attack(this.targetEntity);\n        }\n        return;\n      }\n\n      if (this.tileMap) {\n        const target = this.tileMap.getCell(tx, ty);\n        if (target && target !== this.targetTile) {\n          this.targetTile = target;\n          this.path = computePath(this.tileMap, this.player, this.targetTile, 100);\n          this.pathIndex = 0;\n        }\n      }\n    }\n\n    let nextStep = null;\n    if (this.path) {\n      nextStep = this.path[this.pathIndex];\n      while (nextStep && nextStep.x === this.player.x && nextStep.y === this.player.y) {\n        this.pathIndex++;\n        nextStep = this.pathIndex < this.path.length ? this.path[this.pathIndex] : null;\n      }\n      if (nextStep && this.getEnemyAt(nextStep.x, nextStep.y)) {\n        // Entity in the way.  Cancel the path.\n        nextStep = null;\n      }\n      if (!nextStep) {\n        this.targetTile = undefined;\n        this.path = undefined;\n      }\n    }\n\n    const down = this.app.isKeyPressed(Keys.VK_NUMPAD2) || this.app.isKeyPressed(Keys.VK_DOWN) ||\n        (nextStep && nextStep.y > this.player.y);\n\n    const left = this.app.isKeyPressed(Keys.VK_NUMPAD4) || this.app.isKeyPressed(Keys.VK_LEFT) ||\n        (nextStep && nextStep.x < this.player.x);\n\n    const right = this.app.isKeyPressed(Keys.VK_NUMPAD6) || this.app.isKeyPressed(Keys.VK_RIGHT) ||\n        (nextStep && nextStep.x > this.player.x);\n\n    const up = this.app.isKeyPressed(Keys.VK_NUMPAD8) || this.app.isKeyPressed(Keys.VK_UP) ||\n        (nextStep && nextStep.y < this.player.y);\n\n    const wait = this.app.isKeyPressed(Keys.VK_NUMPAD5);\n\n    if (up) {\n      this.player.tryMoveOrAttack(0, -1);\n    }\n    if (left) {\n      this.player.tryMoveOrAttack(-1, 0);\n    }\n    if (right) {\n      this.player.tryMoveOrAttack(1, 0);\n    }\n    if (down) {\n      this.player.tryMoveOrAttack(0, 1);\n    }\n    if (wait) {\n      this.player.actionPoints = 0;\n    }\n  }\n\n  private doAi(entity: Entity) {\n    if (entity.ai) {\n      if (!this.tileMap || (this.tileMap.isVisible(entity.x, entity.y) && entity.ai.activatedCount > 0)) {\n        entity.ai.doAi();\n      }\n    }\n\n    entity.actionPoints = 0;\n  }\n\n  private nextTurn() {\n    if (this.player && this.entities[this.turnIndex] === this.player) {\n      // Player just finished turn\n\n      // Update FOV\n      if (this.player && this.tileMap) {\n        this.tileMap.computeFov(this.player.x, this.player.y, 13);\n\n        // Determine which entities are activated\n        for (let i = 0; i < this.entities.length; i++) {\n          const entity = this.entities[i];\n          if (entity.ai) {\n            if (this.tileMap.isVisible(entity.x, entity.y)) {\n              entity.ai.activatedCount++;\n            } else {\n              entity.ai.activatedCount = -1;\n            }\n          }\n        }\n      }\n\n      // Sort entities by distance from player\n      this.entities.sort((a, b) => {\n        if (!this.player) {\n          return 0;\n        }\n        const ad = Math.hypot(a.x - this.player.x, a.y - this.player.y);\n        const bd = Math.hypot(b.x - this.player.x, b.y - this.player.y);\n        return ad - bd;\n      });\n    }\n    this.turnIndex++;\n    if (this.turnIndex >= this.entities.length) {\n      // Reached the end of the entities list.  Start at beginning.\n      this.turnIndex = 0;\n      for (let i = 0; i < this.entities.length; i++) {\n        this.entities[i].actionPoints = 1;\n      }\n    }\n  }\n\n  getEnemyAt(x: number, y: number) {\n    for (let i = 0; i < this.entities.length; i++) {\n      const other = this.entities[i];\n      if (!other.canAttack || other.health <= 0) {\n        // Dead, ignore\n        continue;\n      }\n      if (other.x === x && other.y === y) {\n        return other;\n      }\n    }\n    return undefined;\n  }\n}\n","import {AI} from './ai';\n\nexport class BasicMonster extends AI {\n  doAi() {\n    const monster = this.entity;\n    const player = monster.game.player;\n    if (!player) {\n      return;\n    }\n\n    if (monster.distanceTo(player) >= 2) {\n      // Move towards player if far away\n      monster.moveToward(player.x, player.y);\n\n    } else if (player.health > 0) {\n      // Close enough, attack! (if the player is still alive.)\n      monster.attack(player);\n    }\n  }\n}\n","import {Entity} from '../entity';\nimport {RNG} from '../rng';\n\nimport {AI} from './ai';\n\nexport class ConfusedMonster extends AI {\n  readonly rng: RNG;\n  numTurns: number;\n  oldAi?: AI;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.rng = new RNG();\n    this.numTurns = 10;\n    this.oldAi = entity.ai;\n  }\n\n  doAi() {\n    if (this.numTurns > 0) {\n      // Still confused...\n      // Move in a random direction, and decrease the number of turns confused\n      this.entity.move(this.rng.nextRange(-1, 1), this.rng.nextRange(-1, 1));\n      this.numTurns--;\n    } else {\n      this.entity.ai = this.oldAi;\n      // addMessage('The ' + this.owner.name + ' is no longer confused!',\n      // wglt.Colors.LIGHT_RED);\n    }\n  }\n}\n","import {Game} from '../game';\nimport {Sprite} from '../sprite';\nimport {Vec2} from '../vec2';\n\nimport {Effect} from './effect';\n\nexport class ProjectileEffect extends Effect {\n  readonly sprite: Sprite;\n  readonly position: Vec2;\n  readonly velocity: Vec2;\n  readonly duration: number;\n\n  constructor(sprite: Sprite, position: Vec2, velocity: Vec2, duration: number) {\n    super(duration, true);\n    this.sprite = sprite;\n    this.position = position;\n    this.velocity = velocity;\n    this.duration = duration;\n  }\n\n  update() {\n    super.update();\n    this.position.add(this.velocity);\n  }\n\n  draw(game: Game) {\n    const x = this.position.x - game.viewport.x;\n    const y = this.position.y - game.viewport.y;\n    this.sprite.draw(game.app, x, y);\n  }\n}\n","import {GUI} from '../gui';\nimport {Rect} from '../rect';\n\nimport {Panel} from './panel';\n\nexport class ImagePanel extends Panel {\n  readonly srcRect: Rect;\n\n  constructor(gui: GUI, srcRect: Rect, destRect: Rect) {\n    super(gui, destRect);\n    this.srcRect = srcRect;\n  }\n\n  drawContents() {\n    const src = this.srcRect;\n    const dst = this.rect;\n    this.gui.app.drawImage(dst.x, dst.y, src.x, src.y, dst.width, dst.height);\n  }\n}","import {App} from '../app';\nimport {Color} from '../color';\nimport {Colors} from '../colors';\nimport {GUI} from '../gui';\nimport {Rect} from '../rect';\nimport {Panel} from './panel';\n\nclass Message {\n  readonly text: string;\n  readonly color: Color;\n\n  constructor(text: string, color: Color) {\n    this.text = text;\n    this.color = color;\n  }\n}\n\nexport class MessageLog extends Panel {\n  private readonly messages: Message[];\n  readonly maxItems: number;\n\n  constructor(gui: GUI, rect: Rect, maxItems?: number) {\n    super(gui, rect);\n    this.messages = [];\n    this.maxItems = maxItems || 5;\n  }\n\n  add(text: string, color?: Color) {\n    this.messages.push(new Message(text, color || Colors.WHITE));\n\n    if (this.messages.length > this.maxItems) {\n      this.messages.splice(0, this.messages.length - this.maxItems);\n    }\n  }\n\n  drawContents() {\n    const x = this.rect.x;\n    let y = this.rect.y;\n\n    if (y < 0) {\n      y = this.gui.app.size.height - y;\n    }\n\n    for (let i = 0; i < this.messages.length; i++) {\n      const msg = this.messages[i];\n      this.gui.app.drawString(msg.text, x, y, msg.color);\n      y += 10;\n    }\n  }\n\n  handleInput() {\n    return false;\n  }\n}","import {GUI} from '../gui';\nimport {Keys} from '../keys';\nimport {Rect} from '../rect';\nimport {Dialog} from './dialog';\nimport {SelectOption} from './selectoption';\n\nconst MARGIN = 4;\nconst LINE_HEIGHT = 10;\n\nexport class SelectDialog extends Dialog {\n  options: SelectOption[];\n  callback: Function;\n\n  constructor(gui: GUI, rect: Rect, title: string, options: SelectOption[], callback: Function) {\n    super(gui, rect, title);\n    this.options = options;\n    this.callback = callback;\n  }\n\n  drawContents() {\n    super.drawContents();\n    const offset = this.rect;\n    for (let i = 0; i < this.options.length; i++) {\n      const str = String.fromCharCode(65 + i) + ' - ' + this.options[i].name;\n      this.gui.app.drawString(str, offset.x + MARGIN, offset.y + MARGIN + i * LINE_HEIGHT);\n    }\n  }\n\n  handleInput() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.gui.app.isKeyPressed(Keys.VK_A + i)) {\n        this.callback(this.options[i]);\n        this.close();\n      }\n    }\n\n    if (this.gui.app.isKeyPressed(Keys.VK_ESCAPE)) {\n      this.close();\n    }\n\n    const mouse = this.gui.app.mouse;\n    const offset = this.rect;\n    if (mouse.upCount === 1 && mouse.x >= offset.x1 && mouse.x < offset.x2) {\n      for (let i = 0; i < this.options.length; i++) {\n        const startY = offset.y + MARGIN + i * LINE_HEIGHT;\n        const endY = startY + LINE_HEIGHT;\n        if (mouse.y >= startY && mouse.y < endY) {\n          this.callback(this.options[i]);\n          this.close();\n        }\n      }\n    }\n\n    return true;\n  }\n}\n","import {initShaderProgram} from './glutils';\nimport {Vec2} from './vec2';\n\nconst TILE_SIZE = 16;\nconst TEXTURE_SIZE = 1024;\n\n// Shader\nconst tilemapVS = 'precision highp float;' +\n\n    'attribute vec2 position;' +\n    'attribute vec2 texture;' +\n\n    'varying vec2 pixelCoord;' +\n    'varying vec2 texCoord;' +\n\n    'uniform vec2 viewOffset;' +\n    'uniform vec2 viewportSize;' +\n    'uniform vec2 tileSize;' +\n    'uniform vec2 mapSize;' +\n\n    'void main(void) {' +\n    '   pixelCoord = (texture * viewportSize) + viewOffset;' +\n    '   texCoord = pixelCoord / mapSize / tileSize;' +\n    '   gl_Position = vec4(position, 0.0, 1.0);' +\n    '}';\n\nconst tilemapFS = 'precision highp float;' +\n\n    'varying vec2 pixelCoord;' +\n    'varying vec2 texCoord;' +\n\n    'uniform vec2 tileSize;' +\n    'uniform sampler2D tiles;' +\n    'uniform sampler2D sprites;' +\n\n    'void main(void) {' +\n    '   vec4 tile = texture2D(tiles, texCoord);' +\n    '   if(tile.x == 1.0 && tile.y == 1.0) { discard; }' +\n    '   vec2 spriteOffset = floor(tile.xy * 256.0) * tileSize;' +\n    '   vec2 spriteCoord = mod(pixelCoord, tileSize);' +\n    '   gl_FragColor = texture2D(sprites, (spriteOffset + spriteCoord) / ' + TEXTURE_SIZE + '.0);' +\n    '   gl_FragColor.a = tile.a;' +\n    '}';\n\nexport class TileMapCell extends Vec2 {\n  tile: number;\n  blocked: boolean;\n  visible: boolean;\n  seen: boolean;\n  g: number;\n  h: number;\n  prev: TileMapCell|null;\n\n  constructor(x: number, y: number, tile: number) {\n    super(x, y);\n    this.tile = tile;\n    this.blocked = true;\n    this.visible = false;\n    this.seen = false;\n    this.g = 0;\n    this.h = 0;\n    this.prev = null;\n  }\n}\n\n/**\n * @constructor\n * @param {number} width\n * @param {number} height\n */\nexport class TileMapLayer {\n  readonly width: number;\n  readonly height: number;\n  readonly imageData: Uint8Array;\n  readonly dimensions: Float32Array;\n  texture: WebGLTexture|null;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.imageData = new Uint8Array(4 * width * height);\n    this.dimensions = new Float32Array([width, height]);\n    this.texture = null;\n    this.clear();\n  }\n\n  clear() {\n    for (let i = 0; i < this.imageData.length; i++) {\n      this.imageData[i] = 255;\n    }\n  }\n\n  setAlpha(x: number, y: number, alpha: number) {\n    this.imageData[4 * (y * this.width + x) + 3] = alpha;\n  }\n\n  initGl(gl: WebGLRenderingContext) {\n    this.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.imageData);\n\n    // MUST be filtered with NEAREST or tile lookup fails\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  }\n\n  updateGl(gl: WebGLRenderingContext) {\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.width, this.height, gl.RGBA, gl.UNSIGNED_BYTE, this.imageData);\n  }\n}\n\n/**\n * @constructor\n * @param {number} width\n * @param {number} height\n * @param {number} layerCount\n */\nexport class TileMap {\n  readonly gl: WebGLRenderingContext;\n  readonly width: number;\n  readonly height: number;\n  readonly grid: TileMapCell[][];\n  readonly layers: TileMapLayer[];\n  tileWidth: number;\n  tileHeight: number;\n\n  private readonly quadVertBuffer: WebGLBuffer;\n  private readonly tilemapShader: WebGLShader;\n  private readonly positionAttribute: number;\n  private readonly textureAttribute: number;\n  private readonly viewportSizeUniform: WebGLUniformLocation;\n  private readonly viewOffsetUniform: WebGLUniformLocation;\n  private readonly mapSizeUniform: WebGLUniformLocation;\n  private readonly tileSizeUniform: WebGLUniformLocation;\n  private readonly tileSamplerUniform: WebGLUniformLocation;\n  private readonly spriteSamplerUniform: WebGLUniformLocation;\n\n  // Field-of-view state\n  private originX: number;\n  private originY: number;\n  private minX: number;\n  private maxX: number;\n  private minY: number;\n  private maxY: number;\n\n  constructor(gl: WebGLRenderingContext, width: number, height: number, layerCount: number) {\n    this.gl = gl;\n    this.width = width;\n    this.height = height;\n    this.grid = new Array(height);\n    this.layers = new Array(layerCount);\n    this.tileWidth = 16;\n    this.tileHeight = 16;\n\n    // Field-of-view state\n    // By default, everything is visible\n    this.originX = 0;\n    this.originY = 0;\n    this.minX = 0;\n    this.maxX = width - 1;\n    this.minY = 0;\n    this.maxY = height - 1;\n\n    for (let y = 0; y < height; y++) {\n      this.grid[y] = new Array(width);\n      for (let x = 0; x < width; x++) {\n        this.grid[y][x] = new TileMapCell(x, y, 0);\n      }\n    }\n\n    for (let i = 0; i < layerCount; i++) {\n      this.layers[i] = new TileMapLayer(width, height);\n    }\n\n    const quadVerts = [\n      // x  y  u  v\n      -1, -1, 0, 1, 1, -1, 1, 1, 1,  1, 1, 0,\n\n      -1, -1, 0, 1, 1, 1,  1, 0, -1, 1, 0, 0\n    ];\n\n    this.quadVertBuffer = gl.createBuffer() as WebGLBuffer;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVertBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(quadVerts), gl.STATIC_DRAW);\n\n    this.tilemapShader = initShaderProgram(gl, tilemapVS, tilemapFS);\n    this.positionAttribute = gl.getAttribLocation(this.tilemapShader, 'position');\n    this.textureAttribute = gl.getAttribLocation(this.tilemapShader, 'texture');\n    this.viewportSizeUniform = gl.getUniformLocation(this.tilemapShader, 'viewportSize') as WebGLUniformLocation;\n    this.viewOffsetUniform = gl.getUniformLocation(this.tilemapShader, 'viewOffset') as WebGLUniformLocation;\n    this.mapSizeUniform = gl.getUniformLocation(this.tilemapShader, 'mapSize') as WebGLUniformLocation;\n    this.tileSizeUniform = gl.getUniformLocation(this.tilemapShader, 'tileSize') as WebGLUniformLocation;\n    this.tileSamplerUniform = gl.getUniformLocation(this.tilemapShader, 'tiles') as WebGLUniformLocation;\n    this.spriteSamplerUniform = gl.getUniformLocation(this.tilemapShader, 'sprites') as WebGLUniformLocation;\n\n    for (let i = 0; i < this.layers.length; i++) {\n      this.layers[i].initGl(gl);\n    }\n  }\n\n  setTile(layerIndex: number, x: number, y: number, tile: number, blocked?: boolean) {\n    this.grid[y][x].tile = tile;\n    this.grid[y][x].blocked = !!blocked;\n\n    const layer = this.layers[layerIndex];\n    const ti = 4 * (y * layer.width + x);\n    const tx = tile === 0 ? 255 : ((tile - 1) % 64) | 0;\n    const ty = tile === 0 ? 255 : ((tile - 1) / 64) | 0;\n    layer.imageData[ti + 0] = tx;\n    layer.imageData[ti + 1] = ty;\n  }\n\n  getCell(tx: number, ty: number) {\n    if (tx < 0 || tx >= this.width || ty < 0 || ty >= this.height) {\n      return null;\n    }\n    return this.grid[ty][tx];\n  }\n\n  getTile(tx: number, ty: number) {\n    const cell = this.getCell(tx, ty);\n    return cell ? cell.tile : 0;\n  }\n\n  isBlocked(tx: number, ty: number) {\n    const cell = this.getCell(tx, ty);\n    return !cell || cell.blocked;\n  }\n\n  isVisible(x: number, y: number) {\n    if (x < this.minX || x > this.maxX || y < this.minY || y > this.maxY) {\n      return false;\n    }\n    return this.grid[y][x].visible;\n  }\n\n  isSeen(tx: number, ty: number) {\n    const cell = this.getCell(tx, ty);\n    return cell && cell.seen;\n  }\n\n  setSeen(tx: number, ty: number, seen: boolean) {\n    const cell = this.getCell(tx, ty);\n    if (cell) {\n      cell.seen = seen;\n    }\n  }\n\n  draw(x: number, y: number, width: number, height: number) {\n    const gl = this.gl;\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    gl.useProgram(this.tilemapShader);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVertBuffer);\n\n    gl.enableVertexAttribArray(this.positionAttribute);\n    gl.enableVertexAttribArray(this.textureAttribute);\n    gl.vertexAttribPointer(this.positionAttribute, 2, gl.FLOAT, false, 16, 0);\n    gl.vertexAttribPointer(this.textureAttribute, 2, gl.FLOAT, false, 16, 8);\n\n    gl.uniform2f(this.viewOffsetUniform, x, y);\n    gl.uniform2f(this.viewportSizeUniform, width, height);\n    gl.uniform2f(this.tileSizeUniform, this.tileWidth, this.tileHeight);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.uniform1i(this.spriteSamplerUniform, 0);\n\n    gl.activeTexture(gl.TEXTURE1);\n    gl.uniform1i(this.tileSamplerUniform, 1);\n\n    const tx1 = (x / this.tileWidth) | 0;\n    const ty1 = (y / this.tileHeight) | 0;\n    const tx2 = ((x + width) / this.tileWidth) | 0;\n    const ty2 = ((y + height) / this.tileHeight) | 0;\n\n    // Draw each layer of the map\n    for (let i = 0; i < this.layers.length; i++) {\n      const layer = this.layers[i];\n\n      for (let ty = ty1; ty <= ty2; ty++) {\n        for (let tx = tx1; tx <= tx2; tx++) {\n          const alpha = this.isVisible(tx, ty) ? 255 : this.isSeen(tx, ty) ? 144 : 0;\n          layer.setAlpha(tx, ty, alpha);\n        }\n      }\n\n      gl.uniform2fv(this.mapSizeUniform, layer.dimensions);\n      gl.bindTexture(gl.TEXTURE_2D, layer.texture);\n      layer.updateGl(gl);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n  }\n\n  resetFov() {\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        this.grid[y][x].seen = false;\n        this.grid[y][x].visible = false;\n      }\n    }\n  }\n\n  computeFov(originX: number, originY: number, radius: number) {\n    this.originX = originX;\n    this.originY = originY;\n    this.minX = Math.max(0, originX - radius);\n    this.minY = Math.max(0, originY - radius);\n    this.maxX = Math.min(this.width - 1, originX + radius);\n    this.maxY = Math.min(this.height - 1, originY + radius);\n\n    for (let y = this.minY; y <= this.maxY; y++) {\n      for (let x = this.minX; x <= this.maxX; x++) {\n        this.grid[y][x].seen = this.grid[y][x].seen || this.grid[y][x].visible;\n        this.grid[y][x].visible = false;\n      }\n    }\n\n    this.grid[originY][originX].visible = true;\n\n    this.computeOctantY(1, 1);\n    this.computeOctantX(1, 1);\n    this.computeOctantY(1, -1);\n    this.computeOctantX(1, -1);\n    this.computeOctantY(-1, 1);\n    this.computeOctantX(-1, 1);\n    this.computeOctantY(-1, -1);\n    this.computeOctantX(-1, -1);\n  }\n\n  /**\n   * Compute the FOV in an octant adjacent to the Y axis\n   */\n  private computeOctantY(deltaX: number, deltaY: number) {\n    const startSlopes: number[] = [];\n    const endSlopes: number[] = [];\n    let iteration = 1;\n    let totalObstacles = 0;\n    let obstaclesInLastLine = 0;\n    let minSlope = 0;\n    let x;\n    let y;\n    let halfSlope;\n    let processedCell;\n    let visible;\n    let extended;\n    let centreSlope;\n    let startSlope;\n    let endSlope;\n    let previousEndSlope;\n\n    for (y = this.originY + deltaY; y >= this.minY && y <= this.maxY;\n         y += deltaY, obstaclesInLastLine = totalObstacles, ++iteration) {\n      halfSlope = 0.5 / iteration;\n      previousEndSlope = -1;\n      for (processedCell = Math.floor(minSlope * iteration + 0.5), x = this.originX + (processedCell * deltaX);\n           processedCell <= iteration && x >= this.minX && x <= this.maxX;\n           x += deltaX, ++processedCell, previousEndSlope = endSlope) {\n        visible = true;\n        extended = false;\n        centreSlope = processedCell / iteration;\n        startSlope = previousEndSlope;\n        endSlope = centreSlope + halfSlope;\n\n        if (obstaclesInLastLine > 0) {\n          if (!(this.grid[y - deltaY][x].visible && !this.grid[y - deltaY][x].blocked) &&\n              !(this.grid[y - deltaY][x - deltaX].visible && !this.grid[y - deltaY][x - deltaX].blocked)) {\n            visible = false;\n          } else {\n            for (let idx = 0; idx < obstaclesInLastLine && visible; ++idx) {\n              if (startSlope <= endSlopes[idx] && endSlope >= startSlopes[idx]) {\n                if (!this.grid[y][x].blocked) {\n                  if (centreSlope > startSlopes[idx] && centreSlope < endSlopes[idx]) {\n                    visible = false;\n                    break;\n                  }\n                } else {\n                  if (startSlope >= startSlopes[idx] && endSlope <= endSlopes[idx]) {\n                    visible = false;\n                    break;\n                  } else {\n                    startSlopes[idx] = Math.min(startSlopes[idx], startSlope);\n                    endSlopes[idx] = Math.max(endSlopes[idx], endSlope);\n                    extended = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (visible) {\n          this.grid[y][x].visible = true;\n          if (this.grid[y][x].blocked) {\n            if (minSlope >= startSlope) {\n              minSlope = endSlope;\n            } else if (!extended) {\n              startSlopes[totalObstacles] = startSlope;\n              endSlopes[totalObstacles++] = endSlope;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Compute the FOV in an octant adjacent to the X axis\n   */\n  private computeOctantX(deltaX: number, deltaY: number) {\n    const startSlopes: number[] = [];\n    const endSlopes: number[] = [];\n    let iteration = 1;\n    let totalObstacles = 0;\n    let obstaclesInLastLine = 0;\n    let minSlope = 0;\n    let x;\n    let y;\n    let halfSlope;\n    let processedCell;\n    let visible;\n    let extended;\n    let centreSlope;\n    let startSlope;\n    let endSlope;\n    let previousEndSlope;\n\n    for (x = this.originX + deltaX; x >= this.minX && x <= this.maxX;\n         x += deltaX, obstaclesInLastLine = totalObstacles, ++iteration) {\n      halfSlope = 0.5 / iteration;\n      previousEndSlope = -1;\n      for (processedCell = Math.floor(minSlope * iteration + 0.5), y = this.originY + (processedCell * deltaY);\n           processedCell <= iteration && y >= this.minY && y <= this.maxY;\n           y += deltaY, ++processedCell, previousEndSlope = endSlope) {\n        visible = true;\n        extended = false;\n        centreSlope = processedCell / iteration;\n        startSlope = previousEndSlope;\n        endSlope = centreSlope + halfSlope;\n\n        if (obstaclesInLastLine > 0) {\n          if (!(this.grid[y][x - deltaX].visible && !this.grid[y][x - deltaX].blocked) &&\n              !(this.grid[y - deltaY][x - deltaX].visible && !this.grid[y - deltaY][x - deltaX].blocked)) {\n            visible = false;\n          } else {\n            for (let idx = 0; idx < obstaclesInLastLine && visible; ++idx) {\n              if (startSlope <= endSlopes[idx] && endSlope >= startSlopes[idx]) {\n                if (!this.grid[y][x].blocked) {\n                  if (centreSlope > startSlopes[idx] && centreSlope < endSlopes[idx]) {\n                    visible = false;\n                    break;\n                  }\n                } else {\n                  if (startSlope >= startSlopes[idx] && endSlope <= endSlopes[idx]) {\n                    visible = false;\n                    break;\n                  } else {\n                    startSlopes[idx] = Math.min(startSlopes[idx], startSlope);\n                    endSlopes[idx] = Math.max(endSlopes[idx], endSlope);\n                    extended = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (visible) {\n          this.grid[y][x].visible = true;\n          if (this.grid[y][x].blocked) {\n            if (minSlope >= startSlope) {\n              minSlope = endSlope;\n            } else if (!extended) {\n              startSlopes[totalObstacles] = startSlope;\n              endSlopes[totalObstacles++] = endSlope;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":""}