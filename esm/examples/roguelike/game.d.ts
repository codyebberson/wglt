import { Cell } from '../../src/cell';
import { Color } from '../../src/color';
import { Console } from '../../src/console';
import { Rect } from '../../src/rect';
import { RNG } from '../../src/rng';
import { Actor } from './actor';
import { App, AppState } from './app';
import { Entity } from './entity';
import { Item } from './item';
export declare class Game implements AppState {
    readonly app: App;
    readonly rng: RNG;
    readonly player: Actor;
    readonly messages: {
        text: string;
        color: Color;
    }[];
    stairs?: Entity;
    entities: Entity[];
    level: number;
    map: Console;
    fovRecompute: boolean;
    targetCursor: {
        x: number;
        y: number;
    };
    targetFunction: ((x: number, y: number) => void) | undefined;
    path?: Cell[];
    pathIndex: number;
    pathWalking: boolean;
    constructor(app: App);
    isBlocked(x: number, y: number): boolean;
    createRoom(map: Console, room: Rect): void;
    createHTunnel(map: Console, x1: number, x2: number, y: number): void;
    createVTunnel(map: Console, y1: number, y2: number, x: number): void;
    createMap(): Console;
    fromDungeonLevel(table: number[][]): number;
    placeObjects(room: Rect): void;
    renderBar(x: number, y: number, totalWidth: number, name: string, value: number, maximum: number, barColor: Color, backColor: Color): void;
    getNamesUnderMouse(): string;
    addMessage(msg: string, opt_color?: Color): void;
    playerMoveOrAttack(dx: number, dy: number): void;
    handleKeys(): void;
    useInventory(choice: number): void;
    checkLevelUp(): void;
    getClosestMonster(x: number, y: number, range: number): Actor | null;
    getMonsterAt(x: number, y: number): Actor | null;
    castHeal(item: Item): void;
    castLightning(item: Item): void;
    castFireball(item: Item): void;
    castConfuse(item: Item): void;
    startTargeting(callback: (x: number, y: number) => void): void;
    endTargeting(x: number, y: number): void;
    cancelTargeting(): void;
    renderAll(): void;
    nextLevel(): void;
    update(): void;
}
